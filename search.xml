<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GitHub Pages + Hexo搭建博客流程</title>
    <url>/posts/391/</url>
    <content><![CDATA[<h1 id="本地安装nodejs"><a href="#本地安装nodejs" class="headerlink" title="本地安装nodejs"></a>本地安装nodejs</h1><p>下载网址：<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a><br>选择版本：node-v14.16.0-x64.msi（长期支持版）<br>默认参数安装，占用内存约53M</p>
<h1 id="本地安装git"><a href="#本地安装git" class="headerlink" title="本地安装git"></a>本地安装git</h1><p>下载网址：<a href="https://gitforwindows.org/">https://gitforwindows.org/</a><br>选择版本：Git-2.30.2-64-bit.exe<br>默认参数安装，占用内存约260M</p>
<h1 id="本地新建存放博客文件的专用文件夹"><a href="#本地新建存放博客文件的专用文件夹" class="headerlink" title="本地新建存放博客文件的专用文件夹"></a>本地新建存放博客文件的专用文件夹</h1><p>进入此文件夹，右键选择“git bash here”，逐行执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo g</span><br><span class="line">hexo s #执行此行后会生成博客主页的本地访问链接，在浏览器中访问 http:&#x2F;&#x2F;localhost:4000 可以预览。预览结束后ctrl+c关闭</span><br></pre></td></tr></table></figure>

<h1 id="连接git到本地"><a href="#连接git到本地" class="headerlink" title="连接git到本地"></a>连接git到本地</h1><p>继续在git bash界面中执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;usrname&quot;</span><br><span class="line">git config --global user.email &quot;email@address&quot;</span><br></pre></td></tr></table></figure>
<p>用户名和邮箱与注册GitHub账号用的保持一致</p>
<p>生成密钥文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;email@address&quot;</span><br></pre></td></tr></table></figure>
<p>之后连按三次回车，在C:\Users\yourname\.ssh文件夹下找到一个叫“id_rsa.pub”的文件，用notepad打开后复制全部内容，在github主页settings找到SSH and GPG keys，添加ssh key，随便起一个名字，把复制的内容粘贴进框里。此时注册GitHub的邮箱应该会收到一封提示“新的密钥已添加”的邮件。</p>
<p>在git bash中继续执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>选择“yes”，此时会显示用户名，说明已经连接成功。</p>
<p>打开博客根目录下的_config.yml文件<br>修改url处的配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://usrname.github.io/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span> <span class="comment">#如果博客存放在子目录，这里就写“root: /usrname.github.io/”</span></span><br></pre></td></tr></table></figure>

<p>修改最后一行的配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:usrname/usrname.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure>
<p>repository修改为自己的github项目地址</p>
<h1 id="发布博文，并将原始文档上传至github-repository"><a href="#发布博文，并将原始文档上传至github-repository" class="headerlink" title="发布博文，并将原始文档上传至github repository"></a>发布博文，并将原始文档上传至github repository</h1><p>在git bash安装如下扩展：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i hexo-deployer-git</span><br></pre></td></tr></table></figure>

<p>然后输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new post &quot;title&quot;</span><br></pre></td></tr></table></figure>
<p>新建一篇标题为“title”的文章</p>
<p>然后打开path\to\Blog\source\_posts<br>下面会多出一个.md文件</p>
<p>编写完markdown文件后，根目录下输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>生成静态网页，然后输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>进行发布效果的本地预览，按ctrl+c结束预览。最后输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>将刚刚的博文内容上传到github repository。此时打开github.io主页可看到刚刚发布的文章文件（通常来说需要等一段时间才能完成渲染）</p>
<h1 id="修改了本地博文-更换主题后的操作"><a href="#修改了本地博文-更换主题后的操作" class="headerlink" title="修改了本地博文/更换主题后的操作"></a>修改了本地博文/更换主题后的操作</h1><p>清理页面缓存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<p>生成渲染，并在本地查看预览效果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g &amp; hexo s</span><br></pre></td></tr></table></figure>

<p>同步至GitHub pages</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<h1 id="更换GitHub用户名后的操作"><a href="#更换GitHub用户名后的操作" class="headerlink" title="更换GitHub用户名后的操作"></a>更换GitHub用户名后的操作</h1><p>把github上的repository仓库名更换为与用户名一致<br>然后打开blog本地文件夹，更改_config.yml文件：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://newusrname.github.io/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:newusrname/newusrname.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure>

<h1 id="修改默认的文章链接生成格式"><a href="#修改默认的文章链接生成格式" class="headerlink" title="修改默认的文章链接生成格式"></a>修改默认的文章链接生成格式</h1><p>在博客文件夹内安装hexo-abbrlink插件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>
<p>可能出现各种dependency错误，按照需求把缺失的dependency用<code>npm install</code>安装即可<br>修改博客配置文件：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink/</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc16</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">dec</span></span><br></pre></td></tr></table></figure>
<p>配置生效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>


<h1 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h1><ol>
<li><a href="https://mfrank2016.github.io/breeze-blog/2020/05/02/hexo/hexo-start/">https://mfrank2016.github.io/breeze-blog/2020/05/02/hexo/hexo-start/</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/35668237">https://zhuanlan.zhihu.com/p/35668237</a></li>
<li><a href="https://blog.csdn.net/as480133937/article/details/100138838">https://blog.csdn.net/as480133937/article/details/100138838</a></li>
</ol>
]]></content>
      <categories>
        <category>博客建站</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
        <tag>博客建站</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/16107/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>博客建站</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>鸻鹬的冬天无人知晓</title>
    <url>/posts/3089/</url>
    <content><![CDATA[<p>2013年的青海，一只金眶鸻沿着刚退下的湖水走过。旅游旺季带来的人群往往汇集在其他几个更为成熟的旅游区，因此显然没给它在这片僻静角落的生活带来多少影响。尽管如此，它的步伐依然细碎而谨慎。它偶尔会停下来抖一抖自己的毛，再顺势打量一番周遭的环境。在它身后，还在读高中的我正拿着刚买不久的《中国鸟类野外手册》，在湖边的大风中一边按着自己随时会被吹走的帽子，一边在图片页反复翻找它的身影。这是我在野外自己辨认出的第一个个人新种，也是我与这类水鸟相识的起点。</p>
<p>鸻鹬，实际上是由“鸻”和“鹬”两类不同的鸟共同构成的词。前者指的是鸻形目鸻科的鸟类，它们体型较小，站立的姿态往往让它们看上去好像没有脖子，远看只像是一些椭圆的小球，而后者通常指鸻形目鹬科、彩鹬科、反嘴鹬科或砺鹬科的鸟类，相比鸻而言体型稍大，站姿也更舒展挺拔。初看这些小鸟，很多人都觉得它们实在是很不起眼。它们要么长得十分低调，只有在繁殖季才会换上稍显亮色的羽毛，要么习性也很低调，出没于少有人打扰的水域，警觉地留意着周边一切潜在的威胁。</p>
<p>即便如此，在我有限的观鸟经历中，鸻鹬们也总是非常特殊的。我并不是一个狂热的推鸟人。比起为了亲眼目睹一种特定的鸟而不远万里奔赴外地，观察那些常见的、稳定的和出没相对规律的鸟类总能给我带来更大的快乐，这其中必然也包括活跃于水潭和海边的鸻鹬。事实上，在拥有了属于自己的望远镜以后，它们很快就成了我镜筒中的常客。</p>
<p>我喜欢观察它们。它们的行动风格在众多鸟类中仿佛自成一派——很少有什么动物像鸻鹬一样给人一种“既悠闲又警惕”的印象。海边的鸻鹬们往往在低潮时出现在浅滩上，搜寻泥沙中的食物。在它们不受惊扰的时候，这样的搜寻往往会持续相当长的时间，甚至足以让我一边架着单筒欣赏一边和朋友闲谈。而一旦受惊，这种安闲的状态就会立刻被打破。它们会群起四散，惊慌的气氛从鸟群的一角迅速传向另一角，之前还安闲自得的鸻鹬们可以在短短几秒之内完成反应，从身边其他个体的动作中获知可能遭遇的危险，并跟随同类飞向更安全的其他地方。当然，这种场景在岭南地区的冬季更容易出现，因为许多常见的鸻鹬类会进行迁徙，年复一年地在繁殖地与越冬地之间往返，并在冬天大量汇集至作为越冬地之一的华南沿海。迁徙行为的成因至今仍是许多学者研究的重点，而对于大多数普通人而言，这种一年一度的盛会往往有另一个层面的震撼力。</p>
<p>2018年7月，当我在内蒙古东北部国道边的一小片湿地看到那些悠闲踱步的黑翅长脚鹬时，几乎立刻就萌生了一种怪异的陌生感。在华南沿海地带，它们是常见的越冬水鸟之一，也是南方冬季水域景观的一部分。而在这里，它们随着春夏的暖意而来，在北方繁殖自己的下一代。平日里难以亲眼见证的迁徙，就这样悄无声息地展露在我眼前，其跨度不只有时间，还有空间。我第一次意识到，无论在何时何地，我们所见的鸻鹬都只是它们一生中的一小部分。在我们不曾抵达的远方，它们还拥有另一种不为人知的新生活——羽色黯淡的寒冷冬季，或是披挂着鲜亮繁殖羽的、忙于照料下一代的春夏季。</p>
<p>长久以来，人们似乎已经惯于给水鸟的迁徙赋予无数人格化的情感寄托。在人类社会尚未广泛受益于横渡大洋的技术时，鸻鹬们就已经以一年一度的迁飞为生。完全可以理解，对于一个无法轻易到达海的另一端的人而言，每年按时出现在海边的鸻鹬不仅寄托着自己对远方的憧憬和向往，更是一种在快速变化的世界中难得的相对恒定的事物。人们在鸻鹬身上寄托的情感，比起为其赋予人格，更像是一种纾解无法实现的探寻欲望的表现。通过想象那些无法亲眼见证的鸻鹬生活图景，我们得以参与到这场跨时空的盛事中，并完成某种超越平凡的精神体验。对于像我一样常年居住在同一个地方的人，是迁徙的鸟带来了我们无法亲身经历的四季。</p>
<p>当然，对于鸻鹬自己，这种长距离迁飞的行为本身也许并不具备如人们所想象那般浓重的情感色彩，也并非为了实现什么所谓的“回家的承诺”，而是由一系列复杂的生化反应和环境因素共同驱动的必然结果，一种在收益与风险之间做出的权衡。作为演化的结果，四季的交替早已被刻进了鸻鹬的身体，最终凝结在它们的双翼上。对于这些迁徙的个体，它们的生命得以跨越人类无法轻易跨越的山河湖海，并终于在不断的繁衍生息中磨平了时空的棱角。</p>
<p>而鸻鹬身上蕴藏的诗意远不止于此。除了奇异的长距离迁徙以外，鸻鹬类的种群历史往往也具有相当重要的启发意义。生活在海边的鸻鹬类，其种群动态往往与海洋的历史变动息息相关，通过计算模拟还原的鸻鹬种群规模更是一种对海洋变化的侧面反映。随着技术的更迭，如今的研究者已经可以利用鸻鹬的基因测序结果模拟其所属种群规模随时间变化的图景。类似的研究方法得到的远不只是单个种群的历史。一次次种群扩张与骤减，就像海边的一次次潮起与潮落——这是一张鸻鹬生命的潮汐表。依靠海洋生活的物种在漫长的时光中逐渐成为了海的一部分，它们的生命从此与海洋的动态变化密不可分，在海洋深刻影响着它们的同时，我们也得以从它们身上探寻地球环境的过往。海的历史被写进了鸻鹬的基因里，人们也通过这种方式短暂地窥视着自己无法真正触及的永恒。</p>
<p>与行动敏捷、神出鬼没的林鸟不同的是，这些水鸟似乎很容易给人一种“稳定而无趣”的错觉——它们不会在同一片树林的不同角落突然闪现又消失，让观鸟人为自己偶尔几秒的走神和疏忽而懊恼不已，更很少像那些偶尔被台风送来的迷鸟一样吸引大推们千里迢迢赶来。对于平日里并不观鸟的人们来说，也极少有谁会发觉一群觅食的鸻鹬当中什么时候多了或少了一些物种。它们就像总是在那里，在开阔的水边或小水沟旁时停时走，灵巧地躲避卷上沙滩的海浪，或是把双腿和喙浸入浅水，低头翻动松软的泥沙。而事实上，它们也的确总是在那里，至少远在人类之前就占据了广阔的水域。然而，它们所经历的变化与动荡却往往难以为人所知。每一年，无数的观鸟人在湿地与海岸边缘来来往往，对我们而言，一片滩涂只是一趟旅程的其中一个目的地，而对于鸻鹬，这就是生命的一切——从出生到死亡，无尽的时光像潮水一样在它们脚下流过。它们年年飞越遥远的海面，或终其一生固守同一片水域，直到雏鸟的绒羽和老年个体的尸骸在泥泞中交融，直到生与死共同沉积为故土的一部分。鸻鹬们就这样安稳地存在着，用细长的双翼在一个庞大的世界中撑起微小却顽强的一角。在这里，它们只恪守属于自己的生存法则，低调得几乎不引人瞩目，只有几声与它们的外貌颇不相符的、遥远而高亢的鸣叫能最终穿透寂静的空气——于是一首不为任何人或事物存在的、古老而坚定的歌，就这样越过漫长的演化史，传到了我们耳中。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>转录组基本分析流程</title>
    <url>/posts/58910/</url>
    <content><![CDATA[<h1 id="查询本机线程数与核数"><a href="#查询本机线程数与核数" class="headerlink" title="查询本机线程数与核数"></a>查询本机线程数与核数</h1><p>因为刚接触生信的时候年少无知（？）不敢乱用组里的服务器，所以下面所有转录组分析我都是用自己的电脑跑的，如果像我一样在本地运行Linux系统一定要注意不要超过本机最高的线程数！</p>
<p>打开cmd，输入以下命令：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">wmic</span><br><span class="line">cpu get numberofcores #获取核数</span><br><span class="line">cpu get numberoflogicalprocessors #获取线程数</span><br></pre></td></tr></table></figure>


<h1 id="rawdata质量检测"><a href="#rawdata质量检测" class="headerlink" title="rawdata质量检测"></a>rawdata质量检测</h1><p>（一般需要先组装参考基因组，但由于当时已经有了参考基因组，这部分的转录组分析直接从reads的比对开始）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fastqc -o &#x2F;path&#x2F;to&#x2F;output&#x2F; &#x2F;input&#x2F;data_1.fq &#x2F;input&#x2F;data_2.fq</span><br></pre></td></tr></table></figure>

<p>在/path/to/output/文件夹里会生成每个样品的指控报告</p>
<h1 id="将gff注释转成gtf格式"><a href="#将gff注释转成gtf格式" class="headerlink" title="将gff注释转成gtf格式"></a>将gff注释转成gtf格式</h1><p>（使用cufflinks的gffread功能）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gffread &#x2F;path&#x2F;to&#x2F;ann.gff -T -o &#x2F;path&#x2F;to&#x2F;ann.gtf</span><br></pre></td></tr></table></figure>


<h1 id="构建index文件"><a href="#构建index文件" class="headerlink" title="构建index文件"></a>构建index文件</h1><p>（使用hisat2软件，事先建一个具有可读写权限的文件夹/path/to/index并在其中操作）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hisat2_extract_exons.py ann.gtf &gt; exons.txt #提取外显子信息到名叫exons的txt文档</span><br><span class="line">hisat2_extract_splice_sites.py ann.gtf &gt; ss.txt #提取可变剪贴信息到名叫ss的txt文档</span><br><span class="line">hisat2-build -p 2 --ss ss.txt --exon exons.txt refseq.fa data #构建index索引，里面的小文件命名为data</span><br></pre></td></tr></table></figure>


<h1 id="将样品的reads比对到index索引中"><a href="#将样品的reads比对到index索引中" class="headerlink" title="将样品的reads比对到index索引中"></a>将样品的reads比对到index索引中</h1><p>（在刚刚建立的index/data文件夹里使用hisat2软件）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">seqkit fq2fa data_1.fq -o data_1.fa #用seqkit软件将fq转换为fa</span><br><span class="line">seqkit fq2fa data_2.fq -o data_2.fa</span><br><span class="line">hisat2 -f -x &#x2F;path&#x2F;to&#x2F;index&#x2F;data -1 &#x2F;path&#x2F;to&#x2F;data_1.fa -2 &#x2F;path&#x2F;to&#x2F;data_2.fa -S &#x2F;path&#x2F;to&#x2F;out.sam</span><br></pre></td></tr></table></figure>


<h1 id="转换sam文件到bam文件"><a href="#转换sam文件到bam文件" class="headerlink" title="转换sam文件到bam文件"></a>转换sam文件到bam文件</h1><p>（节省存储空间，使用samtools）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">samtools view -bS out.sam &gt; out.bam</span><br></pre></td></tr></table></figure>


<h1 id="对bam文件进行排序"><a href="#对bam文件进行排序" class="headerlink" title="对bam文件进行排序"></a>对bam文件进行排序</h1><p>（因为是双端测序，所以需要按照基因名称进行排序，使用samtools sort功能）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">samtools sort out.bam -o out_sorted.bam</span><br></pre></td></tr></table></figure>


<h1 id="对排序后的bam文件进行索引"><a href="#对排序后的bam文件进行索引" class="headerlink" title="对排序后的bam文件进行索引"></a>对排序后的bam文件进行索引</h1><p>（使用samtools index功能，生成bai格式文件）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">samtools index index_out_sorted.bam</span><br></pre></td></tr></table></figure>


<h1 id="查看bam文件比对效率"><a href="#查看bam文件比对效率" class="headerlink" title="查看bam文件比对效率"></a>查看bam文件比对效率</h1><p>（Windows下使用IGV软件进行可视化）</p>
<h1 id="对回帖bam文件进行质量评估"><a href="#对回帖bam文件进行质量评估" class="headerlink" title="对回帖bam文件进行质量评估"></a>对回帖bam文件进行质量评估</h1><p>（使用samtools flagstat功能）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">samtools flagstat out_sorted.bam &gt; out_sorted.flagstat</span><br><span class="line">cat out_sorted.flagstat</span><br></pre></td></tr></table></figure>


<h1 id="对bam文件进行counts计数"><a href="#对bam文件进行counts计数" class="headerlink" title="对bam文件进行counts计数"></a>对bam文件进行counts计数</h1><p>（使用htseq软件）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">htseq-count -s no -r name -f bam -i transcript_id &#x2F;path&#x2F;to&#x2F;out_sorted.bam &#x2F;path&#x2F;to&#x2F;ann.gtf &gt;&#x2F;path&#x2F;to&#x2F;matrix.count 2&gt; &#x2F;path&#x2F;to&#x2F;counts.log</span><br></pre></td></tr></table></figure>


<h1 id="RStudio安装Bioconductor"><a href="#RStudio安装Bioconductor" class="headerlink" title="RStudio安装Bioconductor"></a>RStudio安装Bioconductor</h1><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!requireNamespace(<span class="string">&quot;BiocManager&quot;</span>, quietly = <span class="literal">TRUE</span>))</span><br><span class="line">    install.packages(<span class="string">&quot;BiocManager&quot;</span>)</span><br><span class="line">BiocManager::install(version = <span class="string">&quot;3.10&quot;</span>)</span><br></pre></td></tr></table></figure>


<h1 id="合并表达矩阵"><a href="#合并表达矩阵" class="headerlink" title="合并表达矩阵"></a>合并表达矩阵</h1><p>（使用RStudio，以四个样本为例）</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">&gt; control1&lt;-read.table(<span class="string">&quot;1.count&quot;</span>,sep = <span class="string">&quot;\t&quot;</span>,col.names = <span class="built_in">c</span>(<span class="string">&quot;transcript_id&quot;</span>,<span class="string">&quot;control1&quot;</span>))</span><br><span class="line">&gt; head(control1)</span><br><span class="line">&gt; control2&lt;-read.table(<span class="string">&quot;2.count&quot;</span>,sep = <span class="string">&quot;\t&quot;</span>,col.names = <span class="built_in">c</span>(<span class="string">&quot;transcript_id&quot;</span>,<span class="string">&quot;control2&quot;</span>))</span><br><span class="line">&gt; treat1&lt;-read.table(<span class="string">&quot;3.count&quot;</span>,sep = <span class="string">&quot;\t&quot;</span>,col.names = <span class="built_in">c</span>(<span class="string">&quot;transcript_id&quot;</span>,<span class="string">&quot;treat1&quot;</span>))</span><br><span class="line">&gt; treat2&lt;-read.table(<span class="string">&quot;4.count&quot;</span>,sep = <span class="string">&quot;\t&quot;</span>,col.names = <span class="built_in">c</span>(<span class="string">&quot;transcript_id&quot;</span>,<span class="string">&quot;treat2&quot;</span>))</span><br><span class="line">&gt; raw_count &lt;- merge(merge(control1, control2, by=<span class="string">&quot;transcript_id&quot;</span>), merge(treat1, treat2, by=<span class="string">&quot;transcript_id&quot;</span>))</span><br><span class="line"><span class="comment"># merge()函数只能从两个数据框中选择，不能超过两个，如果样本重复超过2个，需要进行多次merge操作</span></span><br><span class="line">&gt; head(raw_count)</span><br><span class="line">&gt; tail(raw_count)</span><br><span class="line">&gt; raw_count_filt &lt;- raw_count[-<span class="number">1</span>:-<span class="number">5</span>,]</span><br><span class="line">&gt; head(raw_count_filt)</span><br><span class="line">&gt; readcount&lt;-raw_count_filt[ ,-<span class="number">1</span>]</span><br><span class="line">&gt; write.csv(readcount, file=<span class="string">&#x27;readcount.csv&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h1 id="差异表达分析"><a href="#差异表达分析" class="headerlink" title="差异表达分析"></a>差异表达分析</h1><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">&gt; library(tidyverse)</span><br><span class="line">&gt; library(DESeq2)</span><br><span class="line">&gt; mycounts&lt;-read.csv(<span class="string">&quot;readcount+.csv&quot;</span>)</span><br><span class="line">&gt; head(mycounts)</span><br><span class="line">&gt; rownames(mycounts)&lt;-mycounts[,<span class="number">1</span>]</span><br><span class="line">&gt; mycounts&lt;-mycounts[,-<span class="number">1</span>] <span class="comment">#清掉第一列无用的序号</span></span><br><span class="line">&gt; head(mycounts)</span><br><span class="line">&gt; condition &lt;- factor(<span class="built_in">c</span>(<span class="built_in">rep</span>(<span class="string">&quot;control&quot;</span>,<span class="number">2</span>),<span class="built_in">rep</span>(<span class="string">&quot;treat&quot;</span>,<span class="number">2</span>)), levels = <span class="built_in">c</span>(<span class="string">&quot;control&quot;</span>,<span class="string">&quot;treat&quot;</span>))</span><br><span class="line">&gt; condition</span><br><span class="line">&gt; colData &lt;- data.frame(row.names=colnames(mycounts), condition)</span><br><span class="line">&gt; colData</span><br><span class="line">&gt; dds &lt;- DESeqDataSetFromMatrix(mycounts, colData, design= ~ condition)</span><br><span class="line">&gt; dds &lt;- DESeq(dds)</span><br><span class="line">&gt; dds</span><br><span class="line">&gt; res = results(dds, contrast=<span class="built_in">c</span>(<span class="string">&quot;condition&quot;</span>, <span class="string">&quot;control&quot;</span>, <span class="string">&quot;treat&quot;</span>))</span><br><span class="line">&gt; res= results(dds)</span><br><span class="line">&gt; res = res[order(res$pvalue),]</span><br><span class="line">&gt; head(res)</span><br><span class="line">&gt; summary(res) <span class="comment">#统计差异表达分析结果</span></span><br><span class="line"></span><br><span class="line">out of <span class="number">5403</span> with nonzero total read count</span><br><span class="line">adjusted p-value &lt; <span class="number">0.1</span></span><br><span class="line">LFC &gt; <span class="number">0</span> (up)       : <span class="number">63</span>, <span class="number">1.2</span>%</span><br><span class="line">LFC &lt; 0 (down)     : 15, 0.28%</span><br><span class="line">outliers [<span class="number">1</span>]       : <span class="number">0</span>, <span class="number">0</span>%</span><br><span class="line">low counts [2]     : 4503, 83%</span><br><span class="line">(mean count &lt; <span class="number">1502</span>)</span><br><span class="line">[<span class="number">1</span>] see <span class="string">&#x27;cooksCutoff&#x27;</span> argument of ?results</span><br><span class="line">[<span class="number">2</span>] see <span class="string">&#x27;independentFiltering&#x27;</span> argument of ?results</span><br><span class="line"></span><br><span class="line">&gt; write.csv(res,file=<span class="string">&quot;hahaha.csv&quot;</span>)</span><br><span class="line">&gt; table(res$padj&lt;<span class="number">0.05</span>)</span><br><span class="line"><span class="literal">FALSE</span>  <span class="literal">TRUE</span> </span><br><span class="line">  <span class="number">878</span>    <span class="number">22</span> </span><br></pre></td></tr></table></figure>


<h1 id="绘制PCA图"><a href="#绘制PCA图" class="headerlink" title="绘制PCA图"></a>绘制PCA图</h1><p>（在已完成上面差异表达基因分析的基础上进行）</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">&gt; vsdata &lt;- vst(dds, blind=<span class="literal">FALSE</span>)</span><br><span class="line">&gt; plotPCA(vsdata, intgroup=<span class="string">&quot;condition&quot;</span>)</span><br></pre></td></tr></table></figure>


<h1 id="绘制热图"><a href="#绘制热图" class="headerlink" title="绘制热图"></a>绘制热图</h1><p>（在已完成上面差异表达基因分析的基础上进行）</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">&gt; library(<span class="string">&quot;pheatmap&quot;</span>)</span><br><span class="line">&gt; select&lt;-order(rowMeans(counts(dds, normalized = <span class="literal">TRUE</span>)), decreasing = <span class="literal">TRUE</span>)[<span class="number">1</span>:<span class="number">20</span>]</span><br><span class="line">&gt; df &lt;- as.data.frame(colData(dds)[,<span class="built_in">c</span>(<span class="string">&quot;condition&quot;</span>,<span class="string">&quot;sizeFactor&quot;</span>)])</span><br><span class="line">&gt; ntd &lt;- normTransform(dds)</span><br><span class="line">&gt; pheatmap(assay(ntd)[select,], cluster_rows=<span class="literal">FALSE</span>, show_rownames=<span class="literal">FALSE</span>, cluster_cols=<span class="literal">FALSE</span>, annotation_col=df)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>生信分析</category>
      </categories>
      <tags>
        <tag>转录组</tag>
        <tag>生信</tag>
      </tags>
  </entry>
  <entry>
    <title>西西弗神话 - 摘抄</title>
    <url>/posts/24235/</url>
    <content><![CDATA[<h1 id="荒诞推理"><a href="#荒诞推理" class="headerlink" title="荒诞推理"></a>荒诞推理</h1><ol>
<li><p>较低一个层次，就是诡谲性：发觉世界是“厚实”的，瞥见一块石头有多么的奇异，都叫我们无可奈何；大自然，比如一片风景，可以根本不理会我们。一切自然美的深处都藏着某些不合人情的东西，连绵山丘、柔媚天色、婆娑树荫，霎时间便失去了我们所赋予的幻想意义，从此比失去的天堂更遥远了。<u><em>世界原始的敌意，穿越几千年，又追向我们。</em></u>一时间我们莫名其妙，因为几百年间我们只是凭借形象和图画理解世界，而且这些形象和图画是我们预先赋予世界的，从此之后再使用这种人为的手段，我们就力莫能及了。世界逃脱了我们，再次显现出自己的本色。那些惯于蒙面的背景又恢复了本来面目，远离我们而去。</p>
</li>
<li><p>恐惧实际上来自事变毋庸置疑的层面。时间之所以使我们害怕，是时间展现数学般的演示，答案来自演示之后。所以关于灵魂的种种漂亮说法，在这里至少要稍为接受经验法对其对立面的检验。耳光括在僵死的躯体上留不下痕迹，灵魂已经出窍了。经历这个基本的、关键的层面，构成了荒诞感的内容。无用感在这种命运的死亡阴影下萌发了。血迹斑斑的数学规律支配着我们的生存状况，对此，任何道德、任何拼搏都无法先验地解释清楚。</p>
</li>
<li><p>所谓无意识感，就是强求亲切，渴望明了。<u><em>就人而言，理解世界，就是迫使世界具有人性，在世界上烙下人的印记。</em></u></p>
</li>
<li><p>假如我试图把握我所确认的这个我，并加以定位和概括，那么这个我只不过是一掬之水，会从我的指缝流走。我可以把“这个我”会摆出的各种面孔一张张描绘出来，还可以描绘别人给予“这个我”的各种面貌，包括其出身、教育、热忱或沉默、伟大或卑劣。但不可把面貌相加。这颗心即使属于我，我也永远无法确定。我对自己存在的确信和我对这种确信试图赋予的内容，两者之间的鸿沟，永远也填不满。<u><em>我永远是自己的陌路人。</em></u></p>
</li>
<li><p>瞧，比如树木吧，我熟悉树木的粗糙、水分，嗅得出树木的气味。草的芬芳，星的馥郁，夜晚，心情舒坦的某些晚上，我怎能否认我体验到了强而有力的世界？<u><em>然而，地球上的全部科学，压根儿不能使我确信这个世界是属于我的。</em></u>你们给我描绘世界，教我归类世界。你们列举地球的规律，在我渴求知识的时候，我同意地球的规律是真实的。你们剖析地球的机制，于是我的希望为之倍增。末了，你们告诉我神奇美好又多姿多彩的宇宙归结为原子，而原子又归结为电子。所有这一切好得很，我等着你们继往开来。但你们对我说有一种见不着的星球系统，有不少电子围绕一个核团团转动。你们用形象向我解释了世界。于是我看出你们是在做诗，那我就一辈子也弄不清楚了。我还没来得及发火，你们已经改变理论了，难道不是这样吗？这么说来，<u><em>本该教我懂得一切的科学在假设中就结束了，清醒的认识在隐喻中沉没了，不确定性在艺术作品中找到了归宿。</em></u>难道我先前需要付出这么多努力吗？与之相比，山丘柔和的线条和夜晚摸着激跳的心口，教给我更多的东西。言归正传，<u><em>如果说我通过科学懂得现象并一一历数，我却不能因此而说已理解世界。即使我用脚丈量过全球的高山峻岭，也不会知道得更多。</em></u>你们让我在写实和假设之间选择，写实是可靠的，但对我毫无教益，而假设即便对我有教益，却根本不可靠。我对自己对世界都陌生，唯一可依赖的，是用某种思想武装起来，而这种思想一旦肯定什么就否定自身；我惟有拒绝认知和摒弃生命才能得到安宁，而且好胜的愿望总是在藐视其冲击的藩篱上碰壁，这是怎样的状况呢？有志者，必挑起悖论。一切就绪，按部就班，就等着出现中了毒的安宁，那正是无忧无虑、心灵麻木或致命的摒弃所造成的。</p>
</li>
<li><p>海德格尔冷峻地审视了人生状况，宣告人类生存受到了凌辱。唯一的现实，是生灵在各个阶段的“忧虑”。对迷途于世的人及其排遣而言，这忧虑是一种转瞬即逝的恐慌。但恐慌一旦意识到自身，便成为焦虑，即清醒者永久的氛围，“在这种氛围中生存重新抬头”。这位教授使用最抽象的语言，手不发抖地写道：“人类生存的完整性和局限性比人本身处于更优先的地位。”</p>
</li>
<li><p>谢斯托夫独占一方，一直致力于单调得叫人钦佩的著作，始终不懈地朝着同样的真理奋进。他屡屡指出，最严密的体系，最普遍的理性主义，到头来终将在人类思想的非理性上碰壁。</p>
</li>
</ol>
<h1 id="哲学的自杀"><a href="#哲学的自杀" class="headerlink" title="哲学的自杀"></a>哲学的自杀</h1><ol>
<li><p>生活在这种令人窒息的天空下，迫使人要么出走，要么留下。问题是要知道，在第一种情况下如何出走，在第二种情况下为何留下。</p>
</li>
<li><p>从智力上看问题，我可以说荒诞不在于人（如果这样的隐喻有意义的话），也不在于世界，而在于两者的共同存在。</p>
</li>
<li><p>把这种荒诞逻辑推至极限时，我应当承认，这种斗争意味着彻底缺乏希望（跟绝望毫不相干），意味着不断的拒绝（不应与弃绝相混淆）以及意识到的不满足（不要联想到青春不安）。一切破坏、回避或缩小这些要求的（首先是赞同取消分离），都有损于荒诞并贬低了由此可能提建议的态度。<u><em>只有在不赞同荒诞的条件下，荒诞才有意义。</em></u></p>
</li>
<li><p>人一旦意识到荒诞，就永远与荒诞绑在一起了。一个人没有希望，并意识到没有希望，就不再属于未来了。这是天意。但世人竭力逃脱自己创造的世界，也是天意呀。</p>
</li>
<li><p>为此，我要重提谢斯托夫。一位评论家援引他的一句话，值得注意：“唯一真正的出路恰恰处在人类判断没有出路的地方。否则我们需要上帝干吗？我们转向上帝只是为了得到不可能得到的东西。至于可以得到的，世人足以对付得了。”如果说有什么谢斯托夫的哲学，我可以说他的哲学完全由这句话概括了。谢斯托夫作了充满激情的分析之后，发现了一切存在的基本荒诞性，他不说“这就是荒诞”，而说“这就是上帝：还是拜托上帝为上策，即使上帝不适合我们任何一种理性范畴”。为了不至于发生混淆，这位俄国哲学家甚至暗示上帝也许是记恨的、可憎的、不可理喻的、矛盾百出的，但只要上帝的面目是最可怕的，就可确定其强大。<u><em>上帝的伟大，在于叫人摸不着头脑；上帝的证据，在于不通人情世故。</em></u>哲学家必须自身跃进，并通过这个飞跃来摆脱理性幻想。因此，谢斯托夫认为，<u><em>接受荒诞的同时，就是荒诞本身的体现。证实荒诞等于接受荒诞。</em></u></p>
</li>
<li><p>绝对否定理性是徒劳无益的。理性有自己的范畴，在自己的范畴里是有效的。这正是人类经验的范畴。所以我们想要把一切都搞个水落石出。反之，我们之所以不能把什么都搞清楚，荒诞之所以应运而生，恰恰因为碰上了有效而有限的理性，碰上了不断再生的非理性。</p>
</li>
</ol>
<p>tbc.</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>一个超简单的admixture结果排序脚本</title>
    <url>/posts/64483/</url>
    <content><![CDATA[<p>刚开始用admixture做种群结构分析的时候还没开始学perl和python（虽然现在也没学会多少），每次做出结果都只会按vcf默认的顺序排列作图，做完了再用ai慢慢挪动条形图。学了编程以后发现竟然就这就能搞定了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">q = <span class="built_in">open</span>(<span class="string">&quot;output.Q&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line"></span><br><span class="line">line = q.readlines()</span><br><span class="line">print(line[<span class="number">65</span>],line[<span class="number">66</span>],……,line[<span class="number">64</span>]) <span class="comment">#这里用的其实还是笨办法，手动把样品顺序全部罗列一遍。理论上也可以用字符串自动比对来实现</span></span><br><span class="line"></span><br><span class="line">q.close()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>生信分析</category>
      </categories>
      <tags>
        <tag>生信</tag>
        <tag>基因组</tag>
      </tags>
  </entry>
  <entry>
    <title>用ReLERNN计算全基因组重组率景观</title>
    <url>/posts/59035/</url>
    <content><![CDATA[<p>ReLERNN是一个通过神经网络机器学习来计算全基因组局部重组率的软件，美中不足的是安装起来依赖环境太多且配置很麻烦，而且实际使用起来不能自定义滑动窗口大小，只能用软件内机器学习得出的最佳窗口大小（不知道后面会不会更新自定义窗口大小的功能）。</p>
<h1 id="安装流程记录"><a href="#安装流程记录" class="headerlink" title="安装流程记录"></a>安装流程记录</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;kr-colab&#x2F;ReLERNN.git</span><br><span class="line">cd ReLERNN&#x2F;</span><br><span class="line">pip install</span><br><span class="line">#ERROR: You must give at least one requirement to install (see &quot;pip help install&quot;)</span><br><span class="line">pip install .</span><br></pre></td></tr></table></figure>

<p>后续补充安装的一些包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install h5py</span><br><span class="line">pip install tensorflow</span><br></pre></td></tr></table></figure>

<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#step 1: simulation</span><br><span class="line"></span><br><span class="line">ReLERNN_SIMULATE -v file.vcf \</span><br><span class="line">-g file.bed \</span><br><span class="line">-d &#x2F;path&#x2F;to&#x2F;output&#x2F; \</span><br><span class="line">-t 1 --phased</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#step 2: training neural network</span><br><span class="line"></span><br><span class="line">ReLERNN_TRAIN -d &#x2F;path&#x2F;to&#x2F;output&#x2F; \</span><br><span class="line">--gpuID 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#step 3: predicting recombination rate for single population</span><br><span class="line"></span><br><span class="line">ReLERNN_PREDICT -v file.vcf \</span><br><span class="line">-d &#x2F;path&#x2F;to&#x2F;output&#x2F; \</span><br><span class="line">--phased </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#step 4 (optional): generating 95% confidence intervals and correcting bias</span><br><span class="line">#这一步我一般不做，可能以后做非常精细的分析会用到？</span><br><span class="line"></span><br><span class="line">#ReLERNN_BSCORRECT -d &#x2F;path&#x2F;to&#x2F;output&#x2F; \</span><br><span class="line">#-t 1</span><br></pre></td></tr></table></figure>

<p>ReLERNN官网：<a href="https://github.com/kr-colab/ReLERNN">https://github.com/kr-colab/ReLERNN</a><br>原始文献：<a href="https://doi.org/10.1093/molbev/msaa038">https://doi.org/10.1093/molbev/msaa038</a></p>
]]></content>
      <categories>
        <category>生信分析</category>
      </categories>
      <tags>
        <tag>生信</tag>
        <tag>基因组</tag>
      </tags>
  </entry>
  <entry>
    <title>Mallet驳Mayr对达尔文的误解 - 2008</title>
    <url>/posts/25596/</url>
    <content><![CDATA[<p>原文：Mallet J. Mayr’s view of Darwin: was Darwin wrong about speciation?[J]. Biological Journal of the Linnean Society, 2008, 95(1): 3-16.</p>
<h1 id="1－简介"><a href="#1－简介" class="headerlink" title="1－简介"></a>1－简介</h1><h2 id="公众认为达尔文错了的两大原因"><a href="#公众认为达尔文错了的两大原因" class="headerlink" title="公众认为达尔文错了的两大原因"></a>公众认为达尔文错了的两大原因</h2><ul>
<li>1、达尔文发现了自然选择导致的进化，却无法将其应用于“物种起源”这一他自己提出的主题。</li>
<li>2、他说服了世界接受进化的概念，却无法解释《物种起源》这本书的标题。</li>
</ul>
<h2 id="Mallet认为达尔文被误解了的两大原因"><a href="#Mallet认为达尔文被误解了的两大原因" class="headerlink" title="Mallet认为达尔文被误解了的两大原因"></a>Mallet认为达尔文被误解了的两大原因</h2><ul>
<li>1、很少有人认真读过他的书（对不起但这点真的很好笑）。</li>
<li>2、大多数人都在用现代的定义和观念去衡量他当年的观点。</li>
</ul>
<h2 id="但不可否认的是，将达尔文的观点奉为圭臬肯定有其危险性"><a href="#但不可否认的是，将达尔文的观点奉为圭臬肯定有其危险性" class="headerlink" title="但不可否认的是，将达尔文的观点奉为圭臬肯定有其危险性"></a>但不可否认的是，将达尔文的观点奉为圭臬肯定有其危险性</h2><h2 id="Mayr在引用达尔文言论时过于断章取义了"><a href="#Mayr在引用达尔文言论时过于断章取义了" class="headerlink" title="Mayr在引用达尔文言论时过于断章取义了"></a>Mayr在引用达尔文言论时过于断章取义了</h2><h1 id="2－达尔文实际上的观点及其含义"><a href="#2－达尔文实际上的观点及其含义" class="headerlink" title="2－达尔文实际上的观点及其含义"></a>2－达尔文实际上的观点及其含义</h1><h2 id="关于人工选择和“物种”的本质"><a href="#关于人工选择和“物种”的本质" class="headerlink" title="关于人工选择和“物种”的本质"></a>关于人工选择和“物种”的本质</h2><ul>
<li>达尔文的本意：物种的形成是连续的，物种间和亚种间的差距只不过是数量级层面上不同而已，但它们都处于同一个物种形成的continuum上。</li>
<li>作者观点：科学发展不需要及其精准的定义，因此也不用对species这个定义过于苛责。科学发展不应受制于定义，反倒是定义应基于科学概念得到。</li>
</ul>
<h2 id="关于物种形成中地理隔离的必要性"><a href="#关于物种形成中地理隔离的必要性" class="headerlink" title="关于物种形成中地理隔离的必要性"></a>关于物种形成中地理隔离的必要性</h2><ul>
<li><p>地理隔离的一个局限性：如果分布区太小，总个体数就很小，就会限制住总的突变数量，不利于这个种群的colonization。</p>
<ul>
<li>从这个角度看，地理隔离对新物种的形成就没那么必要了，因为大种群带来的突变机会更多，更利于物种适应不同环境。</li>
</ul>
</li>
</ul>
<h2 id="达尔文的物种形成机制：divergence"><a href="#达尔文的物种形成机制：divergence" class="headerlink" title="达尔文的物种形成机制：divergence"></a>达尔文的物种形成机制：divergence</h2><ul>
<li><p>达尔文理解的物种形成并没有中间形态。</p>
</li>
<li><p>达尔文认为的物种形成两大要素。</p>
<ul>
<li><p>分化</p>
<ul>
<li>核心：分化程度越高，占领不同生境的能力越强。</li>
</ul>
</li>
<li><p>灭绝</p>
</li>
</ul>
</li>
<li><p>Mallet认为虽然达尔文当年还并不知道遗传漂变的概念，但他已经隐约感知到了这个道理。</p>
</li>
</ul>
<h2 id="那么，为什么我们没看见更多处于物种形成中间形态的生物？"><a href="#那么，为什么我们没看见更多处于物种形成中间形态的生物？" class="headerlink" title="那么，为什么我们没看见更多处于物种形成中间形态的生物？"></a>那么，为什么我们没看见更多处于物种形成中间形态的生物？</h2><h2 id="杂交后代可育性与物种的本质"><a href="#杂交后代可育性与物种的本质" class="headerlink" title="杂交后代可育性与物种的本质"></a>杂交后代可育性与物种的本质</h2><ul>
<li>出于对性选择的认同，达尔文可能会倾向于否定跨物种的选型互配，以及由此带来的物种形成过程。</li>
</ul>
<h1 id="3－Mayr关于达尔文没能理解物种本质的观点（先扬后抑）"><a href="#3－Mayr关于达尔文没能理解物种本质的观点（先扬后抑）" class="headerlink" title="3－Mayr关于达尔文没能理解物种本质的观点（先扬后抑）"></a>3－Mayr关于达尔文没能理解物种本质的观点（先扬后抑）</h1><h2 id="Mayr的重要贡献"><a href="#Mayr的重要贡献" class="headerlink" title="Mayr的重要贡献"></a>Mayr的重要贡献</h2><ul>
<li><p>清晰阐述了“生物学上的物种概念”（“biological species concept，BSC”）。</p>
<ul>
<li><p>然而，Mayr的BSC其实是两个相关联概念的组合。</p>
<ul>
<li><p>生殖隔离：Mayr在这点上与杜布赞斯基观点一致。</p>
</li>
<li><p>多型种（polytypic species）：there were often a number of named, morphologically divergent, geographic subspecies within each widely distributed species</p>
<ul>
<li>地理上被隔绝的多样性物种只能被称为“亚种”，而非物种。</li>
<li>只有在它们出现在同一区域且没有出现中间形态个体的时候才能叫做单独的物种。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>物种形成不只是简单的“分化”，它必须具备同时出现在同域却不会相互融合的特质。达尔文其实明白这点，只不过没有在《物种起源》清晰表达出来，但这不是全盘否认他对物种定义的理由。</p>
<ul>
<li>Mayr对这点的观点导致之后的研究者们几乎达成了这么一个共识：要研究物种形成，就必须研究生殖隔离，因为只有生殖隔离才能让不同物种同时出现在同一个地方。</li>
</ul>
</li>
</ul>
<h2 id="Mayr把路走偏了（went-too-far）"><a href="#Mayr把路走偏了（went-too-far）" class="headerlink" title="Mayr把路走偏了（went too far）"></a>Mayr把路走偏了（went too far）</h2><ul>
<li><p>Mayr提出的“现代”概念其实当年的达尔文主义者都考虑过，并不算非常崭新的革命性见解。</p>
</li>
<li><p>Mayr的某些问题耽误了后世的人们正确认知物种形成。</p>
<ul>
<li><p>1、Mayr使用并推行了杜布赞斯基的“隔离机制”</p>
<ul>
<li><p>我们现在已经知道很多生殖隔离的进化其实和物种形成毫无关联，相反，这些生殖隔离是在物种形成之后才建立起来的。</p>
<ul>
<li><p>centrarchid fish只用了两百万年就完成了sister taxa的物种形成，但用了一千五百万年才建立起生殖隔离。</p>
</li>
<li><p>在杂交带，杂交后代的低适合度和可育性变化幅度很大，并不稳定，也不能预测表型和基因型的两极分化。</p>
<ul>
<li>与之相反，生态习性上的分化却往往能通过在配偶选择行为方面的“副作用or副产物”来导致接触区地带里快速且极端的分化。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>2、Mayr被一对完美相对的概念迷惑了</p>
<ul>
<li>除非拥有生殖隔离，否则物种就不能共同存在。</li>
<li>新物种只能在异域的条件下才能形成。</li>
</ul>
</li>
<li><p>3、Mayr在后期已经逐渐认识到了自己的错误，而大量事实证据也在涌现</p>
<ul>
<li><p>事实证明，即使在基因流存在的情况下，不同物种照样可以共存。</p>
</li>
<li><p>跨物种的杂交和渐渗很常见，而且可以对物种形成有贡献（即使是在非多倍体中也可以）。</p>
</li>
<li><p>在同一个湖里的鱼的爆炸性成种最有可能的解释就是同域成种。</p>
<ul>
<li>当然，我们仍然不知道同域成种到底有多普遍，这一点还需要进一步评估。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="4－What-if？"><a href="#4－What-if？" class="headerlink" title="4－What if？"></a>4－What if？</h1><h2 id="Mayr原本可以不选择如此偏激的观点"><a href="#Mayr原本可以不选择如此偏激的观点" class="headerlink" title="Mayr原本可以不选择如此偏激的观点"></a>Mayr原本可以不选择如此偏激的观点</h2><h2 id="Mayr的观念完全是可以与达尔文主义共存的"><a href="#Mayr的观念完全是可以与达尔文主义共存的" class="headerlink" title="Mayr的观念完全是可以与达尔文主义共存的"></a>Mayr的观念完全是可以与达尔文主义共存的</h2><h2 id="Mayr的错误观念导致的一些不良后果（这里提到的两点都很有意思）"><a href="#Mayr的错误观念导致的一些不良后果（这里提到的两点都很有意思）" class="headerlink" title="Mayr的错误观念导致的一些不良后果（这里提到的两点都很有意思）"></a>Mayr的错误观念导致的一些不良后果（这里提到的两点都很有意思）</h2><ul>
<li>在一些宗教保守的国家，进化生物学的推行尤为困难。如果像Mayr一样将物种视作“本质上与亚种完全不同的东西”，那么新物种的进化过程就会变得更加神秘也更难理解，这样只会让进化的研究面临更大的阻力。</li>
<li>由于Mayr坚称所有物种的最终归宿都会是“pure species”，而杂交个体的出现是由于生殖隔离的“breakdown”，这导致美国政府推出了被称为“hybrid policy”的濒危动物保护法，在这个法案的理解中，只要存在杂交，那么一个物种就不再是“pure”的了，它就不再是原本值得保护的那同一个物种，因此也就不值得针对它开展什么保育项目了。就连Mayr本人后来都声称这个法案过于严格了。现在这个法案已被撤销。</li>
</ul>
]]></content>
      <categories>
        <category>读文章</category>
      </categories>
      <tags>
        <tag>进化生物学</tag>
        <tag>物种形成</tag>
        <tag>读文章笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>用selscan进行全基因组正选择扫描</title>
    <url>/posts/24658/</url>
    <content><![CDATA[<p>selscan是一款非常实用的全基因组正选择扫描软件，接受经过phasing处理的vcf作为输入文件，可以按指定大小的滑动窗口计算EHH、iHS和nSL等等正选择指标。</p>
<h1 id="按位点逐条scaffold计算"><a href="#按位点逐条scaffold计算" class="headerlink" title="按位点逐条scaffold计算"></a>按位点逐条scaffold计算</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">selscan --nsl --vcf &#x2F;path&#x2F;to&#x2F;file.vcf --out &#x2F;path&#x2F;to&#x2F;outname</span><br></pre></td></tr></table></figure>

<h1 id="用sliding-window进行上述结果的标准化"><a href="#用sliding-window进行上述结果的标准化" class="headerlink" title="用sliding window进行上述结果的标准化"></a>用sliding window进行上述结果的标准化</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">norm --nsl --files outname.nsl.out --bp-win --winsize 50000</span><br></pre></td></tr></table></figure>

<h1 id="通过shell循环一次性计算多个scaffold的nSL"><a href="#通过shell循环一次性计算多个scaffold的nSL" class="headerlink" title="通过shell循环一次性计算多个scaffold的nSL"></a>通过shell循环一次性计算多个scaffold的nSL</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">filelist=`ls /path/to/list`</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$filelist</span></span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> PID:$$</span><br><span class="line"> <span class="built_in">echo</span> ========== selscan <span class="keyword">for</span> <span class="variable">$file</span> start at : `date` ==========</span><br><span class="line"> selscan --nsl --vcf <span class="variable">$file</span> --out <span class="variable">$file</span></span><br><span class="line"> <span class="built_in">echo</span> ========== selscan <span class="keyword">for</span> <span class="variable">$file</span> end at : `date` ==========</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h1 id="官网上给出的详细参数和输出结果说明"><a href="#官网上给出的详细参数和输出结果说明" class="headerlink" title="官网上给出的详细参数和输出结果说明"></a>官网上给出的详细参数和输出结果说明</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">To normalize selscan output across frequency bins:</span><br><span class="line"></span><br><span class="line">.&#x2F;norm [--ihs|--xpehh|--nsl|--xpnsl|--ihh12] --files &lt;file1.*.out&gt; ... &lt;fileN.*.out&gt;</span><br><span class="line"></span><br><span class="line">To normalize selscan output and analyze non-overlapping windows of fixed bp for </span><br><span class="line">extreme scores:</span><br><span class="line"></span><br><span class="line">.&#x2F;norm [--ihs|--xpehh|--nsl|--xpnsl|--ihh12] --files &lt;file1.*.out&gt; ... &lt;fileN.*.out&gt; --bp-win</span><br><span class="line"></span><br><span class="line">----------Command Line Arguments----------</span><br><span class="line"></span><br><span class="line">--bins &lt;int&gt;: The number of frequency bins in [0,1] for score normalization.</span><br><span class="line">    Default: 100</span><br><span class="line"></span><br><span class="line">--bp-win &lt;bool&gt;: If set, will use windows of a constant bp size with varying</span><br><span class="line">    number of SNPs.</span><br><span class="line">    Default: false</span><br><span class="line"></span><br><span class="line">--crit-percent &lt;double&gt;: Set the critical value such that a SNP with iHS in the most extreme CRIT_PERCENT tails (two-tailed) is marked as an extreme SNP.</span><br><span class="line">    Not used by default.</span><br><span class="line">    Default: -1.00</span><br><span class="line"></span><br><span class="line">--crit-val &lt;double&gt;: Set the critical value such that a SNP with |iHS| &gt; CRIT_VAL is marked as an extreme SNP.  Default as in Voight et al.</span><br><span class="line">    Default: 2.00</span><br><span class="line"></span><br><span class="line">--files &lt;string1&gt; ... &lt;stringN&gt;: A list of files delimited by whitespace for</span><br><span class="line">    joint normalization.</span><br><span class="line">    Expected format for iHS or nSL files (no header):</span><br><span class="line">    &lt;locus name&gt; &lt;physical pos&gt; &lt;freq&gt; &lt;ihh1&#x2F;sL1&gt; &lt;ihh2&#x2F;sL2&gt; &lt;ihs&#x2F;nsl&gt;</span><br><span class="line">    Expected format for XP-EHH files (one line header):</span><br><span class="line">    &lt;locus name&gt; &lt;physical pos&gt; &lt;genetic pos&gt; &lt;freq1&gt; &lt;ihh1&gt; &lt;freq2&gt; &lt;ihh2&gt; &lt;xpehh&gt;</span><br><span class="line">    Expected format for iHH12 files (one line header):</span><br><span class="line">    &lt;locus name&gt; &lt;physical pos&gt; &lt;freq1&gt; &lt;ihh12&gt;</span><br><span class="line">    Default: infile</span><br><span class="line"></span><br><span class="line">--first &lt;bool&gt;: Output only the first file&#39;s normalization.</span><br><span class="line">    Default: false</span><br><span class="line"></span><br><span class="line">--help &lt;bool&gt;: Prints this help dialog.</span><br><span class="line">    Default: false</span><br><span class="line"></span><br><span class="line">--ihh12 &lt;bool&gt;: Do ihh12 normalization.</span><br><span class="line">    Default: false</span><br><span class="line"></span><br><span class="line">--ihs &lt;bool&gt;: Do iHS normalization.</span><br><span class="line">    Default: false</span><br><span class="line"></span><br><span class="line">--log &lt;string&gt;: The log file name.</span><br><span class="line">    Default: logfile</span><br><span class="line"></span><br><span class="line">--min-snps &lt;int&gt;: Only consider a bp window if it has at least this many SNPs.</span><br><span class="line">    Default: 10</span><br><span class="line"></span><br><span class="line">--nsl &lt;bool&gt;: Do nSL normalization.</span><br><span class="line">    Default: false</span><br><span class="line"></span><br><span class="line">--qbins &lt;int&gt;: Outlying windows are binned by number of sites within each</span><br><span class="line">    window.  This is the number of quantile bins to use.</span><br><span class="line">    Default: 10</span><br><span class="line"></span><br><span class="line">--winsize &lt;int&gt;: The non-overlapping window size for calculating the percentage</span><br><span class="line">    of extreme SNPs.</span><br><span class="line">    Default: 100000</span><br><span class="line"></span><br><span class="line">--xpehh &lt;bool&gt;: Do XP-EHH normalization.</span><br><span class="line">    Default: false</span><br><span class="line"></span><br><span class="line">--xpnsl &lt;bool&gt;: Do XP-nSL normalization.</span><br><span class="line">    Default: false</span><br></pre></td></tr></table></figure>

<p>norm v1.3.0 - Now supports –xpnsl flag, which is identical to using –xpehh.<br>–qbins now has a default value of 10 instead of 20.<br>–bp-win analyses have been changed when analyzing XP-EHH and XP-nSL scores. Since positive scores suggest adaptation in the first (non-ref) population and negative scores suggest adaptation in the second (ref) population, we split windows into those enriched for extreme positive scores and those enriched for extreme negative scores.<br>min and max scores are given for each window for XP statistics, and the max |score| is reported for iHS and nSL stats.</p>
<p>*.windows output files therefore have additional columns:</p>
<p>For XP stats:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;win start&gt; &lt;win end&gt; &lt;# scores in win&gt; &lt;frac scores gt threshold&gt; &lt;frac scores lt threshold&gt; &lt;approx percentile for gt threshold wins&gt; &lt;approx percentile for lt threshold wins&gt; &lt;max score&gt; &lt;min score&gt;</span><br></pre></td></tr></table></figure>

<p>For iHS and nSL:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;win start&gt; &lt;win end&gt; &lt;# scores in win&gt; &lt;frac scores gt threshold&gt; &lt;frac scores lt threshold&gt; &lt;approx percentile for gt threshold wins&gt; &lt;approx percentile for lt threshold wins&gt; &lt;max score&gt; &lt;min score&gt;</span><br></pre></td></tr></table></figure>

<h1 id="官网上关于XP-nSL输出结果的解释"><a href="#官网上关于XP-nSL输出结果的解释" class="headerlink" title="官网上关于XP-nSL输出结果的解释"></a>官网上关于XP-nSL输出结果的解释</h1><p><a href="https://github.com/szpiech/selscan/issues/68">https://github.com/szpiech/selscan/issues/68</a></p>
<p>selscan官网：<a href="https://github.com/szpiech/selscan">https://github.com/szpiech/selscan</a><br>原始文献：<a href="https://doi.org/10.1093/molbev/msu211">https://doi.org/10.1093/molbev/msu211</a></p>
]]></content>
      <categories>
        <category>生信分析</category>
      </categories>
      <tags>
        <tag>生信</tag>
        <tag>基因组</tag>
      </tags>
  </entry>
  <entry>
    <title>用ANGSD和Stairway Plot2构建种群历史动态</title>
    <url>/posts/33302/</url>
    <content><![CDATA[<h1 id="1、用angsd将bam文件转换为saf格式"><a href="#1、用angsd将bam文件转换为saf格式" class="headerlink" title="1、用angsd将bam文件转换为saf格式"></a>1、用angsd将bam文件转换为saf格式</h1><p>比起easySFS.py脚本来说，angsd对于missing data的考虑更加全面，但是处理起来相对而言会更麻烦一点。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#用samtools给参考基因组构建索引</span><br><span class="line">samtools faidx ref.fa</span><br><span class="line"></span><br><span class="line">angsd -bam bam.bamlist \</span><br><span class="line">-doSaf 1 -out XXX \</span><br><span class="line">-anc ref.fa \ #确保上一步生成的fai索引文件位于参考基因组的同一路径下</span><br><span class="line">-GL 1 -minMapQ 1 -minQ 30</span><br></pre></td></tr></table></figure>

<h1 id="2、用angsd内置程序realSFS将saf转换为sfs"><a href="#2、用angsd内置程序realSFS将saf转换为sfs" class="headerlink" title="2、用angsd内置程序realSFS将saf转换为sfs"></a>2、用angsd内置程序realSFS将saf转换为sfs</h1><p>这一步总是显示占用过多内存，尤其是在单个种群的样本量多于10个并且都是测序深度较高的时候，相当麻烦。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">realSFS \</span><br><span class="line">XXX.saf.idx \</span><br><span class="line">-maxIter 100 -P 2 -fold 1 &gt; XXX_folded.sfs</span><br><span class="line">#这个“-fold 1”的参数是为了生成folded版本的sfs。公认的解释似乎是不清楚祖先态的时候适用folded，而vcf文件被较好polarized的时候适用unfolded版本</span><br></pre></td></tr></table></figure>

<h1 id="3、在sfs基础上生成shell批处理文件"><a href="#3、在sfs基础上生成shell批处理文件" class="headerlink" title="3、在sfs基础上生成shell批处理文件"></a>3、在sfs基础上生成shell批处理文件</h1><p>首先需要给每个目标种群编辑一份blueprint后缀的文件，里面标注出这个种群的相关信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#XXX blueprint file</span><br><span class="line">#input setting</span><br><span class="line">popid: XXX # id of the population (no white space)</span><br><span class="line">nseq: XX # number of sequences</span><br><span class="line">L: 1234895725 # total number of observed nucleic sites, including polymorphic and monomorphic</span><br><span class="line">whether_folded: true # whethr the SFS is folded (true or false)</span><br><span class="line">SFS:     XXX.XXX XXX.XXX XXX.XXX XXX.XXX XXX.XXX XXX.XXX XXX.XXX XXX.XXX XXX.XXX XXX.XXX XXX.XXX  # snp frequency spectrum: number of singleton, number of doubleton, etc. (separated by white space)</span><br><span class="line">#smallest_size_of_SFS_bin_used_for_estimation: 1 # default is 1; to ignore singletons, uncomment this line and change this number to 2</span><br><span class="line">#largest_size_of_SFS_bin_used_for_estimation: 17 # default is nseq&#x2F;2 for folded SFS</span><br><span class="line">pct_training: 0.67 # percentage of sites for training</span><br><span class="line">nrand: (nseq-2)&#x2F;4    (nseq-2)&#x2F;2   (nseq-2)*3&#x2F;4   nseq-2 # number of random break points for each try (separated by white space)</span><br><span class="line">project_dir: &#x2F;path&#x2F;to&#x2F;XXX&#x2F; # project directory</span><br><span class="line">stairway_plot_dir: &#x2F;path&#x2F;to&#x2F;stairway_plot_v2.1.1&#x2F;stairway_plot_es # directory to the stairway plot files</span><br><span class="line">ninput: 200 # number of input files to be created for each estimation</span><br><span class="line">#random_seed: 6</span><br><span class="line">#output setting</span><br><span class="line">mu: XXXe-X # assumed mutation rate per site per generation</span><br><span class="line">year_per_generation: XXX # assumed generation time (in years)</span><br><span class="line">#plot setting</span><br><span class="line">plot_title: demo_XXX # title of the plot</span><br><span class="line">xrange: 0.1,10000 # Time (1k year) range; format: xmin,xmax; &quot;0,0&quot; for default</span><br><span class="line">yrange: 0,0 # Ne (1k individual) range; format: xmin,xmax; &quot;0,0&quot; for default</span><br><span class="line">xspacing: 2 # X axis spacing</span><br><span class="line">yspacing: 2 # Y axis spacing</span><br><span class="line">fontsize: 12 # Font size</span><br></pre></td></tr></table></figure>
<p>编辑blueprint文件参数的相关说明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">popid: 这里不能包含空格</span><br><span class="line">nseq: 也就是你这个种群个体数×2</span><br><span class="line">L: 参考基因组总长度（总共有多少个碱基）</span><br><span class="line">whether_folded: 按照上面生成sfs文件的过程填true或者false</span><br><span class="line">SFS: 上一步生成的sfs文件中去除第一个数字和之后所有的0</span><br><span class="line">#smallest_size_of_SFS_bin_used_for_estimation: 1 # default is 1; to ignore singletons, uncomment this line and change this number to 2</span><br><span class="line">#largest_size_of_SFS_bin_used_for_estimation: 17 # default is nseq&#x2F;2 for folded SFS</span><br><span class="line">pct_training: 似乎默认的就是0.67</span><br><span class="line">nrand: 这里的4个数字分别按照这样计算（除不尽时取整数）：(nseq-2)&#x2F;4, (nseq-2)&#x2F;2, (nseq-2)*3&#x2F;4, nseq-2</span><br><span class="line">project_dir: 输出结果文件夹</span><br><span class="line">stairway_plot_dir: stairway_plot_es程序所在的路径</span><br><span class="line">ninput: 每次模拟输入的数据量，一般为200</span><br><span class="line">#random_seed: 6</span><br><span class="line">#output setting</span><br><span class="line">mu: 突变率</span><br><span class="line">year_per_generation: 世代数</span><br><span class="line">#plot setting</span><br><span class="line">plot_title: 输出图片的名字</span><br><span class="line">xrange: x轴（距今时间）的范围</span><br><span class="line">yrange: y轴（Ne大小）的范围，默认为0,0</span><br><span class="line">xspacing: X axis spacing</span><br><span class="line">yspacing: Y axis spacing</span><br><span class="line">fontsize: 字体大小</span><br></pre></td></tr></table></figure>
<p>然后运行stairbuilder程序，在这个blueprint文件的基础上生成后续模拟分析需要的批处理脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup java -cp &#x2F;path&#x2F;to&#x2F;stairway_plot_v2.1.1&#x2F;stairway_plot_es \</span><br><span class="line">Stairbuilder &#x2F;path&#x2F;to&#x2F;XXX_folded.blueprint 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<p>这一步之后会在当前文件夹里生成一个叫XXX.blueprint.sh的脚本。之后只要nohup执行这个脚本就行了。</p>
<h1 id="4、运行stairwayplot程序"><a href="#4、运行stairwayplot程序" class="headerlink" title="4、运行stairwayplot程序"></a>4、运行stairwayplot程序</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup sh XXX_folded.blueprint.sh &gt; XXX_folded.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<p>生成的.final后缀文件就是最终的结果图。</p>
]]></content>
      <categories>
        <category>生信分析</category>
      </categories>
      <tags>
        <tag>生信</tag>
        <tag>基因组</tag>
      </tags>
  </entry>
  <entry>
    <title>用easySFS和fastsimcoal2模拟种群历史事件</title>
    <url>/posts/52914/</url>
    <content><![CDATA[<h1 id="easySFS计算sfs"><a href="#easySFS计算sfs" class="headerlink" title="easySFS计算sfs"></a>easySFS计算sfs</h1><h2 id="安装easySFS适用的conda环境"><a href="#安装easySFS适用的conda环境" class="headerlink" title="安装easySFS适用的conda环境"></a>安装easySFS适用的conda环境</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda create -n easySFS</span><br><span class="line">conda activate easySFS</span><br><span class="line"></span><br><span class="line">#Install dependencies:</span><br><span class="line">conda install -c bioconda dadi pandas</span><br><span class="line"></span><br><span class="line">#Clone this repo: </span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;isaacovercast&#x2F;easySFS.git</span><br><span class="line">cd easySFS</span><br><span class="line">chmod 777 easySFS.py</span><br><span class="line">.&#x2F;easySFS.py</span><br></pre></td></tr></table></figure>

<h2 id="试运行，并判断是否需要down-sample"><a href="#试运行，并判断是否需要down-sample" class="headerlink" title="试运行，并判断是否需要down sample"></a>试运行，并判断是否需要down sample</h2><p>这一步是为missing data很多的情况准备的。easySFS对missing data的考虑并不如angsd那么周到，所以一般需要进行这一步，根据输出的文件判断是否要缩小后续采样数目：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;path&#x2F;to&#x2F;easySFS.py \</span><br><span class="line">-i &#x2F;path&#x2F;to&#x2F;file.vcf \</span><br><span class="line">-p pops_file.txt \</span><br><span class="line">--preview</span><br></pre></td></tr></table></figure>


<p>根据官网的解释，这里生成的文件里，每个“（）”里面前面的数字代表采样投影数目（即projection），后面的代表这个数目下的frequency，要在考虑到样本数目的情况下选择frequency最大的projection数目。</p>
<p>之前查到一个说法，说因为研究的对象是二倍体，所以project数目要全部乘二，但是【后续发现其实不需要乘二，因为是“down” sample，乘二会超出最高样本量限制，导致算出的sfs里所有数值都是0！】</p>
<h2 id="再次运行并生成sfs文件"><a href="#再次运行并生成sfs文件" class="headerlink" title="再次运行并生成sfs文件"></a>再次运行并生成sfs文件</h2><p>上一步得到的projection数目会作为这一步里的一个参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;path&#x2F;to&#x2F;easySFS.py \</span><br><span class="line">-i &#x2F;path&#x2F;to&#x2F;file.vcf \</span><br><span class="line">-p pops_file.txt \</span><br><span class="line">--proj 27,22,13,13 #上一步得出的最佳projection数目，按顺序排列</span><br></pre></td></tr></table></figure>

<p>这一步会自动生成output文件夹，里面按照具体需求分成了dadi和fastsimcoal会用到的数据。fastsimcoal2需要的文件是obs和sfs后缀的那些。</p>
<h1 id="fastsimcoal2种群历史模拟"><a href="#fastsimcoal2种群历史模拟" class="headerlink" title="fastsimcoal2种群历史模拟"></a>fastsimcoal2种群历史模拟</h1><h2 id="基本原理和思路-▲"><a href="#基本原理和思路-▲" class="headerlink" title="基本原理和思路 ▲"></a>基本原理和思路 ▲</h2><p>fastsimcoal2的原理其实就是从现在到过去的<ins><em><strong>溯祖</strong></em></ins>过程，所以一切都需要反过来思考，比如瓶颈效应按照进化的时间顺序应该是从较大的种群规模变得更小，Ne是【减小】的，但在溯祖模型里就是从正在经历的瓶颈，即更小的种群规模回到了更大的规模，所以Ne是【增大】的。</p>
<p>同理，种群的分化/split在这里就应该理解为“两个原先分开的种群合并为了一个”，再精确一些，应用在实际模型运行中，就是“两个原本分开的种群，其中一个种群中的全部个体都迁移到了另一个当中”，因此可以用migration参数为1的迁移事件表示一次历史上的种群split。</p>
<p>这里的思路转换非常重要，因为所有模型构建都必须按照这个思路来进行。简单来讲，就是【从现在回到过去】模拟种群的历史。</p>
<h2 id="输入文件"><a href="#输入文件" class="headerlink" title="输入文件"></a>输入文件</h2><h3 id="obs文件"><a href="#obs文件" class="headerlink" title="obs文件"></a>obs文件</h3><p>上一步运行easySFS得到的结果文件。如果使用其他软件比如angsd计算sfs，需要自己手动写很多obs后缀的文件，也就是写一行类似这样的开头：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 observation</span><br><span class="line">    d0_0  d0_1  d0_2  d0_3  d0_4  d0_5  d0_6  d0_7  d0_8  d0_9  d0_10 d0_11 d0_12 d0_13 d0_14 d0_15 d0_16 d0_17 d0_18 d0_19 d0_20 d0_21 d0_22 d0_23 d0_24 d0_25 d0_26 d0_27</span><br></pre></td></tr></table></figure>

<p>然后把folded sfs的值（包含后半部分全是0的那些）复制到下一行就行了。你有几个种群，就需要写多少个两两比对的obs文件。为了便于这一步的计算，还是直接用easySFS算sfs比较好。</p>
<h3 id="tpl文件"><a href="#tpl文件" class="headerlink" title="tpl文件"></a>tpl文件</h3><p>也就是template模板的意思。这个文件标明了一些很基础的参数，比如是否有基因流/瓶颈效应/种群扩张，有多少次，各发生在哪个时间段里。参数解释：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Number of population samples (demes) #这里的demes数目是指从现在往回溯祖之前，【现今】总共有多少个种群</span><br><span class="line">4</span><br><span class="line">&#x2F;&#x2F;Population effective sizes (number of genes) #因为这里想要计算的未知参数之一就是现今的Ne，所以在这个文件里都会用字母表示这类需要软件计算的参数，相当于解方程时设置x和y的意思</span><br><span class="line">Nwfp</span><br><span class="line">Nckp</span><br><span class="line">Nhyb</span><br><span class="line">Ntw</span><br><span class="line">&#x2F;&#x2F;Sample sizes #因为研究物种是二倍体，所以这里是每个种群个体数×2</span><br><span class="line">54</span><br><span class="line">44</span><br><span class="line">26</span><br><span class="line">26</span><br><span class="line">&#x2F;&#x2F;Growth rates  : negative growth implies population expansion #我没有用到这个参数</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">&#x2F;&#x2F;Number of migration matrices : 0 implies no migration between demes #这里没有用到基因流矩阵，所以没设置</span><br><span class="line">0</span><br><span class="line">&#x2F;&#x2F;historical event: time, source, sink, migrants, new size, new growth rate, migr. matrix </span><br><span class="line">#这七个参数分别的意思是：历史事件发生的时间，起源于哪个种群，终止于哪个种群，有多少比例的迁移&#x2F;基因流，该事件结束后终止种群的新规模是之前的多少倍，该事件结束后终止种群的新增长率，该事件发生时使用哪个基因流矩阵</span><br><span class="line">7  historical event </span><br><span class="line">T2BOT 2 2 0 RE2BOT 0 0</span><br><span class="line">T3BOT 3 3 0 RE3BOT 0 0</span><br><span class="line">T0BOT 0 0 0 RE0BOT 0 0</span><br><span class="line">T1BOT 1 1 0 RE1BOT 0 0</span><br><span class="line">Thyb 2 0 1 REhyb 0 0</span><br><span class="line">Ttw 3 1 1 REtw 0 0</span><br><span class="line">TANC 0 1 1 REANC 0 0</span><br><span class="line">&#x2F;&#x2F;Number of independent loci [chromosome]  #这里我没改</span><br><span class="line">1 0</span><br><span class="line">&#x2F;&#x2F;Per chromosome: Number of linkage blocks  #这里也没改</span><br><span class="line">1</span><br><span class="line">&#x2F;&#x2F;per Block: data type, num loci, rec. rate and mut rate + optional parameters #如果输入文件用的是empirical的sfs数据就用FREQ这个类型表示，突变率我设置了和stairway plot 2一样的数值，最后那个参数也没改</span><br><span class="line">FREQ 1 0 8.1e-10 OUTEXP</span><br></pre></td></tr></table></figure>

<p>*关于这里的migration matrix：基因流矩阵，就是定义基因流方向的一个参数。我的个人理解如下表（以一个四种群模型为例）：</p>
<table>
<thead>
<tr>
<th>sink\source</th>
<th>A</th>
<th>B</th>
<th>C</th>
<th>D</th>
</tr>
</thead>
<tbody><tr>
<td><strong>A</strong></td>
<td>/</td>
<td>B→A</td>
<td>C→A</td>
<td>D→A</td>
</tr>
<tr>
<td><strong>B</strong></td>
<td>A→B</td>
<td>/</td>
<td>C→B</td>
<td>D→B</td>
</tr>
<tr>
<td><strong>C</strong></td>
<td>A→C</td>
<td>B→C</td>
<td>/</td>
<td>D→C</td>
</tr>
<tr>
<td><strong>D</strong></td>
<td>A→D</td>
<td>B→D</td>
<td>C→D</td>
<td>/</td>
</tr>
</tbody></table>
<p>按照这个矩阵，如果是一个只包含从A到C基因流的矩阵，写在tpl文件里就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.000 0.000 0.000 0.000 </span><br><span class="line">0.000 0.000 0.000 0.000</span><br><span class="line">migAtoC 0.000 0.000 0.000</span><br><span class="line">0.000 0.000 0.000 0.000</span><br></pre></td></tr></table></figure>

<p>如果同时包含A和C之间的双向基因流，又包含从B到D的单向基因流，那就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.000 0.000 migCtoA 0.000 </span><br><span class="line">0.000 0.000 0.000 0.000</span><br><span class="line">migAtoC 0.000 0.000 0.000</span><br><span class="line">0.000 migBtoD 0.000 0.000</span><br></pre></td></tr></table></figure>

<p>不包含任何基因流的矩阵就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.000 0.000 0.000 0.000 </span><br><span class="line">0.000 0.000 0.000 0.000 </span><br><span class="line">0.000 0.000 0.000 0.000 </span><br><span class="line">0.000 0.000 0.000 0.000</span><br></pre></td></tr></table></figure>

<h3 id="est文件"><a href="#est文件" class="headerlink" title="est文件"></a>est文件</h3><p>向软件解释每个参数的估算方式和范围的文件。从fsc2.7开始往后的版本里【不会再需要“RULES”这一栏】了，所以这个文件只会有两栏，“PARAMETERS”和“COMPLEX PARAMETERS”，其中前者表示简单的、没有彼此包含关系的参数，后者表示具有依赖和包含关系的参数，可以理解为后者是前者的因变量。示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Priors and rules file</span><br><span class="line">&#x2F;&#x2F; *********************</span><br><span class="line"></span><br><span class="line">[PARAMETERS]</span><br><span class="line">#这里的七个参数分别代表：是否为整数（1代表是，0代表否，我一般估算种群大小和时间的时候就设为1，如果估算的是增长率&#x2F;resize比例这种就设为0），</span><br><span class="line">#参数的名字，这个unif具体含义我没查到，最低值，最高值，是否输出结果，是否对该参数限制范围</span><br><span class="line">&#x2F;&#x2F;#isInt? #name   #dist.#min  #max</span><br><span class="line">&#x2F;&#x2F;all Ns are in number of haploid individuals</span><br><span class="line">1  Nwfp  unif 100  100000 output bounded</span><br><span class="line">1  Nckp  unif 1000  100000 output bounded</span><br><span class="line">1  Nhyb  unif 100  100000 output bounded</span><br><span class="line">1  Ntw  unif 100  100000 output bounded</span><br><span class="line">1  N2preBOT  unif 100  150000 output bounded</span><br><span class="line">1  N3preBOT  unif 100  150000 output bounded</span><br><span class="line">1  N0preBOT  unif 100  150000 output bounded</span><br><span class="line">1  N1preBOT  unif 100  600000 output bounded</span><br><span class="line">1  NAwfp  unif 100  100000 output bounded</span><br><span class="line">1  NAkp  unif 1000  100000 output bounded</span><br><span class="line">1  NANC  unif 1000  100000 output bounded</span><br><span class="line">1  Ttw  unif  10 600000 output bounded</span><br><span class="line">1  Thyb  unif  10 600000 output bounded</span><br><span class="line">1  TANC  unif  10 6000000 output bounded</span><br><span class="line">1  T2BOT  unif  10 600000 output bounded</span><br><span class="line">1  T3BOT  unif  10 600000 output bounded</span><br><span class="line">1  T0BOT  unif  10 600000 output bounded</span><br><span class="line">1  T1BOT  unif  10 600000 output bounded</span><br><span class="line"></span><br><span class="line">[RULES] #fsc2.7之后的版本都不再需要这个了</span><br><span class="line"></span><br><span class="line">[COMPLEX PARAMETERS]  #这里定义的都是需要依赖以上简单参数才能计算的那些参数，你需要在这里给定几个参数间的相关关系</span><br><span class="line">#有一点非常值得注意的是，这些参数的名字不能互为子集关系，比如两个参数的名字不能是“Nhyb”和“NhybBOT”，因为前者是后者的子集，所以软件会报错</span><br><span class="line">0 REhyb    &#x3D; NAwfp&#x2F;Nwfp hide</span><br><span class="line">0 REtw &#x3D; NAkp&#x2F;Nckp hide</span><br><span class="line">0 REANC &#x3D; NANC&#x2F;NAkp hide</span><br><span class="line">0 RE2BOT &#x3D; N2preBOT&#x2F;Nhyb hide</span><br><span class="line">0 RE3BOT &#x3D; N3preBOT&#x2F;Ntw hide</span><br><span class="line">0 RE0BOT &#x3D; N0preBOT&#x2F;Nwfp hide</span><br><span class="line">0 RE1BOT &#x3D; N1preBOT&#x2F;Nckp hide</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>生信分析</category>
      </categories>
      <tags>
        <tag>生信</tag>
        <tag>基因组</tag>
      </tags>
  </entry>
  <entry>
    <title>由自然选择驱动的物种形成及其相关的三个主要问题 - 2022</title>
    <url>/posts/6278/</url>
    <content><![CDATA[<p>原文：Schluter D, Rieseberg LH. 2022. Three problems in the genetics of speciation by selection. Proceedings of the National Academy of Sciences 119:e2122153119.</p>
<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>the link between the genetics of phenotypic divergence and intrinsic postzygotic reproductive barriers remains tenuous  -基因型或表型分化不一定就和合子【后】生殖隔离有关</p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>It was not clear whether genetic differences causing reproductive isolation were mainly in the same genes responsible for phenotypic differences between species or whether, according to Dobzhansky, they represented “a separate category of genetic changes” (<a href="https://www.pnas.org/doi/10.1073/pnas.2122153119#core-r3">3</a>).</p>
<p>Standing genetic variation includes variants maintained by mutation and selection in ancestral populations prior to divergence, as well as variants flowing in from already differentiated populations and closely related species via interbreeding</p>
<p>reproductive isolation is frequently a by-product of adaptive divergence between populations in phenotypic traits  -生殖隔离往往是两个种群适应性分化的“副产品”，一般来说是自然选择先偏好那些具有适应性的性状，然后到了某个程度，生殖隔离才意外形成的。</p>
<h1 id="表型分化与生殖隔离的演化"><a href="#表型分化与生殖隔离的演化" class="headerlink" title="表型分化与生殖隔离的演化"></a>表型分化与生殖隔离的演化</h1><h2 id="表型分化与合子前隔离的遗传学机制"><a href="#表型分化与合子前隔离的遗传学机制" class="headerlink" title="表型分化与合子前隔离的遗传学机制"></a>表型分化与合子前隔离的遗传学机制</h2><p>适应性性状有助于合子【前】生殖隔离的形成。eg：花粉的不同颜色吸引不同的传粉动物，导致不同种开花植物的分化和生殖隔离。但问题在于如果这种性状是多基因共同决定的（polygenic），那么寻找特定的某个决定性基因就会很困难。</p>
<p>unless recombination is slowed by linkage or eliminated by pleiotropy (<a href="https://www.pnas.org/doi/10.1073/pnas.2122153119#core-r22">22</a>)  -重组率的降低可以因为连锁，也可以是因为基因多效性（个人理解：如果一个基因在原有的位置上就可以决定多个性状，那么它就不需要通过重组去到更多其他地方以便决定更多性状了，所以基因多效性的存在可以抑制重组的发生）</p>
<p>如果一个决定性的基因出现在重组率低的区域上（比如inversion存在的区域），那么检测决定特定性状的基因就会更易被干扰。（所以需要通过其他方法排除inversion的干扰？如果某个区域没有明显的inversion但依然和表型分化相关，那么这个区域上存在决定性基因的可能性就会更大？）</p>
<h2 id="表型分化与合子后隔离的遗传学机制"><a href="#表型分化与合子后隔离的遗传学机制" class="headerlink" title="表型分化与合子后隔离的遗传学机制"></a>表型分化与合子后隔离的遗传学机制</h2><p>合子后生殖隔离可以作为一种表型适应的副产品产生，但是至今很少有人真的证明发生在某个基因的选择和两个物种的分化之间存在必然联系。这有可能是因为在野生种群里做这样的实验验证很难，但也有可能是因为一些常见性状（ordinary phenotypic traits）所受到的选择和两个物种的进化根本就没有关联。（eg：某种叫<em>Mimulus guttatus</em>的花在不同地区适应性不同的种群之间如果杂交，产生的后代会致死。但这个致死性不是因为决定它们不同适应性的基因<em>Tol1</em>，而是因为一个和它连锁而被搭便车获得高频率的突变）</p>
<p>Measurement of “phenotypic incompatibilities” represents another way to test causal links between phenotypic adaptation and genes causing postzygotic isolation. Hybrids between ecologically divergent parents are partly intermediate in many traits, which is expected to reduce hybrid viability and reproductive success in the absence of a hybrid niche. Such disruptive selection should cause fitness underdominance at causal loci and negative epistasis for fitness between them, although these have not been measured.  -理论上表型的不适应性与导致合子后隔离的基因之间的关系应该是很好测量的，比如杂交后代的遗传学特性（决定性位点的超显性和负上位效应），但出于各种原因这些效应至今都没有人具体测量过。</p>
<h2 id="遗传冲突与合子后隔离"><a href="#遗传冲突与合子后隔离" class="headerlink" title="遗传冲突与合子后隔离"></a>遗传冲突与合子后隔离</h2><p>A separate class of mechanisms underlying hybrid inviability and sterility result from gene–gene coevolution without necessarily resulting in phenotypic divergence.</p>
<p>Conflict between nuclear and cytoplasmic genes over offspring sex allocation is pervasive in plants and a frequent cause of postzygotic isolation in hybrids.</p>
<h2 id="在分化中造成损失的重复基因"><a href="#在分化中造成损失的重复基因" class="headerlink" title="在分化中造成损失的重复基因"></a>在分化中造成损失的重复基因</h2><p>如果一个基因有两个重复拷贝，在一个种群中其中一个拷贝被silenced掉了，而在另一个种群中另一个拷贝被silenced掉了，那么这两个种群的杂交后代就可能同时被继承两个亲本的基因型，从而完全丧失掉这个基因并导致致死性或者不育，但这两个亲本种群在表型上反而是一模一样的，所以这种情况下也无法通过测量表型来反映出哪些基因才是决定这种差异的。</p>
<h1 id="重组抑制元件（Recombination-Suppressors）在成种过程中的作用"><a href="#重组抑制元件（Recombination-Suppressors）在成种过程中的作用" class="headerlink" title="重组抑制元件（Recombination Suppressors）在成种过程中的作用"></a>重组抑制元件（<strong>Recombination Suppressors</strong>）在成种过程中的作用</h1><p>-自然选择、基因流和重组之间的关系：Whereas divergent natural selection drives populations apart, gene flow and recombination hold them together.</p>
<p>大多数时候，与局部适应有关的traits都和染色体inversion或者其他重组抑制元件（Recombination Suppressors）存在关联</p>
<h2 id="这一事物在成种中的作用"><a href="#这一事物在成种中的作用" class="headerlink" title="这一事物在成种中的作用"></a>这一事物在成种中的作用</h2><p>-加速物种的形成</p>
<p>在那些局部适应性强的基因和其他基因之间降低的重组率使得物种形成速度更快。但尽管如此，局部适应性强的基因本身就可以充当reproductive barriers。</p>
<p>Inversions appear to contribute more frequently to extrinsic than intrinsic reproductive barriers (<a href="https://www.pnas.org/doi/10.1073/pnas.2122153119#core-r78">78</a>, <a href="https://www.pnas.org/doi/10.1073/pnas.2122153119#core-r81">81</a>), but observations of reduced fertility in inversion heterozygotes (i.e., underdominance) are not uncommon, especially in interspecific crosses (<a href="https://www.pnas.org/doi/10.1073/pnas.2122153119#core-r82">82</a>).  -inversion更常对外在而非内在的生殖隔离产生贡献（外在和内在是指合子前和合子后吗？）</p>
<h2 id="重组抑制元件的类型"><a href="#重组抑制元件的类型" class="headerlink" title="重组抑制元件的类型"></a>重组抑制元件的类型</h2><p>1、inversion  染色体倒位</p>
<p>2、其他结构变异，比如deletions、translocations和mobile element insertions</p>
<p>3、modifier alleles  调控基因，即影响其他基因表型或者表达量的基因</p>
<p>While the prevalence of structural variants versus local modifier alleles is poorly understood, the former spread more easily because they are completely linked to the genes they affect and suppress recombination in heterozygotes only (<a href="https://www.pnas.org/doi/10.1073/pnas.2122153119#core-r57">57</a>).</p>
<h2 id="重组抑制元件如何发挥作用"><a href="#重组抑制元件如何发挥作用" class="headerlink" title="重组抑制元件如何发挥作用"></a>重组抑制元件如何发挥作用</h2><p>Inversions that capture a larger number of coselected alleles that are loosely linked in the ancestral population will have the greatest selective advantage. </p>
<p>Recombination suppressors may spread for other reasons, including direct selection (e.g., due to beneficial breakpoint effects), genetic drift of neutral or weakly deleterious variants, meiotic drive, or as a response to selfish element invasions.</p>
<p>A further complication is that many inversions are *<strong>ancient*</strong> and their current gene content and mutation profile are likely to be different from when they arose.</p>
<p>The distribution of inversion lengths within and between species can offer clues to the mechanisms responsible for their spread. </p>
<h1 id="影响生殖隔离的遗传变异的来源"><a href="#影响生殖隔离的遗传变异的来源" class="headerlink" title="影响生殖隔离的遗传变异的来源"></a>影响生殖隔离的遗传变异的来源</h1><p>standing genetic variation在物种形成中发挥的作用尚不明确。大部分研究选取的都是具有表型差异的年轻物种，这可能会导致没有办法准确区分standing variation和new mutation。</p>
<p>另外，大部分关于standing variation的研究都着重于它对表型差异的影响，而非对生殖隔离的影响。</p>
<p>standing variation对于演化造成的可能结果：由于是多个支系共有的变异，所以很可能会在不同的地区形成平行演化，甚至孕育出生殖隔离。</p>
]]></content>
      <categories>
        <category>读文章</category>
      </categories>
      <tags>
        <tag>进化生物学</tag>
        <tag>物种形成</tag>
        <tag>读文章笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么我们不赞成那些执迷于鉴定出所有barrier loci的做法？ - 2017</title>
    <url>/posts/1773/</url>
    <content><![CDATA[<p>原文：Jiggins C D, Martin S H. Glittering gold and the quest for Isla de Muerta[J]. Journal of Evolutionary Biology, 2017, 30(8): 1509-1511.</p>
<h1 id="主要论点"><a href="#主要论点" class="headerlink" title="主要论点"></a>主要论点</h1><p>反对那些执着于通过全基因组扫描（genomic scan）寻找物种隔离关键位点（barrier loci）的做法，因为这样做既困难有可能让研究者们错过其他更有价值的speciation genomic相关信息（比如genomic architecture本身）</p>
<h1 id="为什么寻找barrier-loci几乎是不可能的？"><a href="#为什么寻找barrier-loci几乎是不可能的？" class="headerlink" title="为什么寻找barrier loci几乎是不可能的？"></a>为什么寻找barrier loci几乎是不可能的？</h1><h2 id="①两个物种间的barriers可能是由多个基因共同决定（polygenic）的"><a href="#①两个物种间的barriers可能是由多个基因共同决定（polygenic）的" class="headerlink" title="①两个物种间的barriers可能是由多个基因共同决定（polygenic）的"></a>①两个物种间的barriers可能是由多个基因共同决定（polygenic）的</h2><p>许多本身功能无穷微弱但彼此不相容（incompatibility loci）的位点也可以导致很强的对基因流的抗性，或是导致杂交后代的全基因组冻结（失效？genome-wide congealing）</p>
<p>这样的barriers还有可能是因为其他的因素形成的，比如局部重组率的变化、基因密度、种群历史动态的随机性（demographic stochasticity），“不是所有金子都会发光（<em>All that is gold does not glitter</em>）”</p>
<h2 id="②对于大多数物种对而言，起主要作用的性状往往会有很多barrier-loci，而不是具体的少数几个"><a href="#②对于大多数物种对而言，起主要作用的性状往往会有很多barrier-loci，而不是具体的少数几个" class="headerlink" title="②对于大多数物种对而言，起主要作用的性状往往会有很多barrier loci，而不是具体的少数几个"></a>②对于大多数物种对而言，起主要作用的性状往往会有很多barrier loci，而不是具体的少数几个</h2><p>eg：<em>Heliconius</em>蝴蝶的wing pattern差异很大，但这种差异反映在基因组层面上时，有很多FST峰值区域，但这些峰值涉及的基因远远不止跟wing pattern相关的那些，而直接和wing pattern差异相关的基因可能也不会在genome scan中展现出非常明显的差异，需要更多其它有针对性的分析来辅助。这些在genome scan中隐藏起来了的barrier loci就像Jack Sparrow船长在加勒比海盗里说的一样，“除了那些原本就清楚它们在哪儿的人之外，根本无法被找到（<em>cannot be found except by those who already know where it is</em>）”</p>
<h2 id="③什么时候更容易找到具有关键作用的barrier-loci？两个物种亲缘关系很近（background-FST≈0）且杂交概率很高的时候"><a href="#③什么时候更容易找到具有关键作用的barrier-loci？两个物种亲缘关系很近（background-FST≈0）且杂交概率很高的时候" class="headerlink" title="③什么时候更容易找到具有关键作用的barrier loci？两个物种亲缘关系很近（background FST≈0）且杂交概率很高的时候"></a>③什么时候更容易找到具有关键作用的barrier loci？两个物种亲缘关系很近（background FST≈0）且杂交概率很高的时候</h2><h2 id="④全基因组信号往往是噪音很大的，要从中筛选出很短的关键barrier-loci非常困难"><a href="#④全基因组信号往往是噪音很大的，要从中筛选出很短的关键barrier-loci非常困难" class="headerlink" title="④全基因组信号往往是噪音很大的，要从中筛选出很短的关键barrier loci非常困难"></a>④全基因组信号往往是噪音很大的，要从中筛选出很短的关键barrier loci非常困难</h2><p>eg：还是<em>Heliconius</em>蝴蝶，一段关键的“dennis” locus ——<em>optix</em>基因只有6kb，这在genome scan当中其实是很难被找出来的，除非结合其他mapping手段或基因表达分析</p>
<h1 id="对物种barrier具有直接贡献的loci在基因组上很可能并没有什么具体的作用"><a href="#对物种barrier具有直接贡献的loci在基因组上很可能并没有什么具体的作用" class="headerlink" title="对物种barrier具有直接贡献的loci在基因组上很可能并没有什么具体的作用"></a>对物种barrier具有直接贡献的loci在基因组上很可能并没有什么具体的作用</h1><p>eg：F1杂交后代所受到的epistatic incompatibilities也可能会导致基因组上微弱却广泛分布的barriers</p>
<h1 id="对于speciation-genomics而言更重要的在于探索genome-architecture本身的影响，而非仅仅执着于鉴定出所有barrier-loci"><a href="#对于speciation-genomics而言更重要的在于探索genome-architecture本身的影响，而非仅仅执着于鉴定出所有barrier-loci" class="headerlink" title="对于speciation genomics而言更重要的在于探索genome architecture本身的影响，而非仅仅执着于鉴定出所有barrier loci"></a>对于speciation genomics而言更重要的在于探索genome architecture本身的影响，而非仅仅执着于鉴定出所有barrier loci</h1>]]></content>
      <categories>
        <category>读文章</category>
      </categories>
      <tags>
        <tag>进化生物学</tag>
        <tag>物种形成</tag>
        <tag>读文章笔记</tag>
      </tags>
  </entry>
</search>
