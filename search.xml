<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GitHub Pages + Hexo搭建博客流程</title>
    <url>/posts/391/</url>
    <content><![CDATA[<h1 id="本地安装nodejs"><a href="#本地安装nodejs" class="headerlink" title="本地安装nodejs"></a>本地安装nodejs</h1><p>下载网址：<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a><br>选择版本：node-v14.16.0-x64.msi（长期支持版）<br>默认参数安装，占用内存约53M</p>
<h1 id="本地安装git"><a href="#本地安装git" class="headerlink" title="本地安装git"></a>本地安装git</h1><p>下载网址：<a href="https://gitforwindows.org/">https://gitforwindows.org/</a><br>选择版本：Git-2.30.2-64-bit.exe<br>默认参数安装，占用内存约260M</p>
<h1 id="本地新建存放博客文件的专用文件夹"><a href="#本地新建存放博客文件的专用文件夹" class="headerlink" title="本地新建存放博客文件的专用文件夹"></a>本地新建存放博客文件的专用文件夹</h1><p>进入此文件夹，右键选择“git bash here”，逐行执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo g</span><br><span class="line">hexo s #执行此行后会生成博客主页的本地访问链接，在浏览器中访问 http:&#x2F;&#x2F;localhost:4000 可以预览。预览结束后ctrl+c关闭</span><br></pre></td></tr></table></figure>

<h1 id="连接git到本地"><a href="#连接git到本地" class="headerlink" title="连接git到本地"></a>连接git到本地</h1><p>继续在git bash界面中执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;usrname&quot;</span><br><span class="line">git config --global user.email &quot;email@address&quot;</span><br></pre></td></tr></table></figure>
<p>用户名和邮箱与注册GitHub账号用的保持一致</p>
<p>生成密钥文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;email@address&quot;</span><br></pre></td></tr></table></figure>
<p>之后连按三次回车，在C:\Users\yourname\.ssh文件夹下找到一个叫“id_rsa.pub”的文件，用notepad打开后复制全部内容，在github主页settings找到SSH and GPG keys，添加ssh key，随便起一个名字，把复制的内容粘贴进框里。此时注册GitHub的邮箱应该会收到一封提示“新的密钥已添加”的邮件。</p>
<p>在git bash中继续执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>选择“yes”，此时会显示用户名，说明已经连接成功。</p>
<p>打开博客根目录下的_config.yml文件<br>修改url处的配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://usrname.github.io/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span> <span class="comment">#如果博客存放在子目录，这里就写“root: /usrname.github.io/”</span></span><br></pre></td></tr></table></figure>

<p>修改最后一行的配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:usrname/usrname.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure>
<p>repository修改为自己的github项目地址</p>
<h1 id="发布博文，并将原始文档上传至github-repository"><a href="#发布博文，并将原始文档上传至github-repository" class="headerlink" title="发布博文，并将原始文档上传至github repository"></a>发布博文，并将原始文档上传至github repository</h1><p>在git bash安装如下扩展：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i hexo-deployer-git</span><br></pre></td></tr></table></figure>

<p>然后输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new post &quot;title&quot;</span><br></pre></td></tr></table></figure>
<p>新建一篇标题为“title”的文章</p>
<p>然后打开path\to\Blog\source\_posts<br>下面会多出一个.md文件</p>
<p>编写完markdown文件后，根目录下输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>生成静态网页，然后输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>进行发布效果的本地预览，按ctrl+c结束预览。最后输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>将刚刚的博文内容上传到github repository。此时打开github.io主页可看到刚刚发布的文章文件（通常来说需要等一段时间才能完成渲染）</p>
<h1 id="修改了本地博文-更换主题后的操作"><a href="#修改了本地博文-更换主题后的操作" class="headerlink" title="修改了本地博文/更换主题后的操作"></a>修改了本地博文/更换主题后的操作</h1><p>清理页面缓存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<p>生成渲染，并在本地查看预览效果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g &amp; hexo s</span><br></pre></td></tr></table></figure>

<p>同步至GitHub pages</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<h1 id="更换GitHub用户名后的操作"><a href="#更换GitHub用户名后的操作" class="headerlink" title="更换GitHub用户名后的操作"></a>更换GitHub用户名后的操作</h1><p>把github上的repository仓库名更换为与用户名一致<br>然后打开blog本地文件夹，更改_config.yml文件：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://newusrname.github.io/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:newusrname/newusrname.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure>

<h1 id="修改默认的文章链接生成格式"><a href="#修改默认的文章链接生成格式" class="headerlink" title="修改默认的文章链接生成格式"></a>修改默认的文章链接生成格式</h1><p>在博客文件夹内安装hexo-abbrlink插件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>
<p>可能出现各种dependency错误，按照需求把缺失的dependency用<code>npm install</code>安装即可<br>修改博客配置文件：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink/</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc16</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">dec</span></span><br></pre></td></tr></table></figure>
<p>配置生效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>


<h1 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h1><ol>
<li><a href="https://mfrank2016.github.io/breeze-blog/2020/05/02/hexo/hexo-start/">https://mfrank2016.github.io/breeze-blog/2020/05/02/hexo/hexo-start/</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/35668237">https://zhuanlan.zhihu.com/p/35668237</a></li>
<li><a href="https://blog.csdn.net/as480133937/article/details/100138838">https://blog.csdn.net/as480133937/article/details/100138838</a></li>
</ol>
]]></content>
      <categories>
        <category>Blog Building</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog Building</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/16107/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Blog Building</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>鸻鹬的冬天无人知晓</title>
    <url>/posts/3089/</url>
    <content><![CDATA[<p>2013年的青海，一只金眶鸻沿着刚退下的湖水走过。旅游旺季带来的人群往往汇集在其他几个更为成熟的旅游区，因此显然没给它在这片僻静角落的生活带来多少影响。尽管如此，它的步伐依然细碎而谨慎。它偶尔会停下来抖一抖自己的毛，再顺势打量一番周遭的环境。在它身后，还在读高中的我正拿着刚买不久的《中国鸟类野外手册》，在湖边的大风中一边按着自己随时会被吹走的帽子，一边在图片页反复翻找它的身影。这是我在野外自己辨认出的第一个个人新种，也是我与这类水鸟相识的起点。</p>
<p>鸻鹬，实际上是由“鸻”和“鹬”两类不同的鸟共同构成的词。前者指的是鸻形目鸻科的鸟类，它们体型较小，站立的姿态往往让它们看上去好像没有脖子，远看只像是一些椭圆的小球，而后者通常指鸻形目鹬科、彩鹬科、反嘴鹬科或砺鹬科的鸟类，相比鸻而言体型稍大，站姿也更舒展挺拔。初看这些小鸟，很多人都觉得它们实在是很不起眼。它们要么长得十分低调，只有在繁殖季才会换上稍显亮色的羽毛，要么习性也很低调，出没于少有人打扰的水域，警觉地留意着周边一切潜在的威胁。</p>
<p>即便如此，在我有限的观鸟经历中，鸻鹬们也总是非常特殊的。我并不是一个狂热的推鸟人。比起为了亲眼目睹一种特定的鸟而不远万里奔赴外地，观察那些常见的、稳定的和出没相对规律的鸟类总能给我带来更大的快乐，这其中必然也包括活跃于水潭和海边的鸻鹬。事实上，在拥有了属于自己的望远镜以后，它们很快就成了我镜筒中的常客。</p>
<p>我喜欢观察它们。它们的行动风格在众多鸟类中仿佛自成一派——很少有什么动物像鸻鹬一样给人一种“既悠闲又警惕”的印象。海边的鸻鹬们往往在低潮时出现在浅滩上，搜寻泥沙中的食物。在它们不受惊扰的时候，这样的搜寻往往会持续相当长的时间，甚至足以让我一边架着单筒欣赏一边和朋友闲谈。而一旦受惊，这种安闲的状态就会立刻被打破。它们会群起四散，惊慌的气氛从鸟群的一角迅速传向另一角，之前还安闲自得的鸻鹬们可以在短短几秒之内完成反应，从身边其他个体的动作中获知可能遭遇的危险，并跟随同类飞向更安全的其他地方。当然，这种场景在岭南地区的冬季更容易出现，因为许多常见的鸻鹬类会进行迁徙，年复一年地在繁殖地与越冬地之间往返，并在冬天大量汇集至作为越冬地之一的华南沿海。迁徙行为的成因至今仍是许多学者研究的重点，而对于大多数普通人而言，这种一年一度的盛会往往有另一个层面的震撼力。</p>
<p>2018年7月，当我在内蒙古东北部国道边的一小片湿地看到那些悠闲踱步的黑翅长脚鹬时，几乎立刻就萌生了一种怪异的陌生感。在华南沿海地带，它们是常见的越冬水鸟之一，也是南方冬季水域景观的一部分。而在这里，它们随着春夏的暖意而来，在北方繁殖自己的下一代。平日里难以亲眼见证的迁徙，就这样悄无声息地展露在我眼前，其跨度不只有时间，还有空间。我第一次意识到，无论在何时何地，我们所见的鸻鹬都只是它们一生中的一小部分。在我们不曾抵达的远方，它们还拥有另一种不为人知的新生活——羽色黯淡的寒冷冬季，或是披挂着鲜亮繁殖羽的、忙于照料下一代的春夏季。</p>
<p>长久以来，人们似乎已经惯于给水鸟的迁徙赋予无数人格化的情感寄托。在人类社会尚未广泛受益于横渡大洋的技术时，鸻鹬们就已经以一年一度的迁飞为生。完全可以理解，对于一个无法轻易到达海的另一端的人而言，每年按时出现在海边的鸻鹬不仅寄托着自己对远方的憧憬和向往，更是一种在快速变化的世界中难得的相对恒定的事物。人们在鸻鹬身上寄托的情感，比起为其赋予人格，更像是一种纾解无法实现的探寻欲望的表现。通过想象那些无法亲眼见证的鸻鹬生活图景，我们得以参与到这场跨时空的盛事中，并完成某种超越平凡的精神体验。对于像我一样常年居住在同一个地方的人，是迁徙的鸟带来了我们无法亲身经历的四季。</p>
<p>当然，对于鸻鹬自己，这种长距离迁飞的行为本身也许并不具备如人们所想象那般浓重的情感色彩，也并非为了实现什么所谓的“回家的承诺”，而是由一系列复杂的生化反应和环境因素共同驱动的必然结果，一种在收益与风险之间做出的权衡。作为演化的结果，四季的交替早已被刻进了鸻鹬的身体，最终凝结在它们的双翼上。对于这些迁徙的个体，它们的生命得以跨越人类无法轻易跨越的山河湖海，并终于在不断的繁衍生息中磨平了时空的棱角。</p>
<p>而鸻鹬身上蕴藏的诗意远不止于此。除了奇异的长距离迁徙以外，鸻鹬类的种群历史往往也具有相当重要的启发意义。生活在海边的鸻鹬类，其种群动态往往与海洋的历史变动息息相关，通过计算模拟还原的鸻鹬种群规模更是一种对海洋变化的侧面反映。随着技术的更迭，如今的研究者已经可以利用鸻鹬的基因测序结果模拟其所属种群规模随时间变化的图景。类似的研究方法得到的远不只是单个种群的历史。一次次种群扩张与骤减，就像海边的一次次潮起与潮落——这是一张鸻鹬生命的潮汐表。依靠海洋生活的物种在漫长的时光中逐渐成为了海的一部分，它们的生命从此与海洋的动态变化密不可分，在海洋深刻影响着它们的同时，我们也得以从它们身上探寻地球环境的过往。海的历史被写进了鸻鹬的基因里，人们也通过这种方式短暂地窥视着自己无法真正触及的永恒。</p>
<p>与行动敏捷、神出鬼没的林鸟不同的是，这些水鸟似乎很容易给人一种“稳定而无趣”的错觉——它们不会在同一片树林的不同角落突然闪现又消失，让观鸟人为自己偶尔几秒的走神和疏忽而懊恼不已，更很少像那些偶尔被台风送来的迷鸟一样吸引大推们千里迢迢赶来。对于平日里并不观鸟的人们来说，也极少有谁会发觉一群觅食的鸻鹬当中什么时候多了或少了一些物种。它们就像总是在那里，在开阔的水边或小水沟旁时停时走，灵巧地躲避卷上沙滩的海浪，或是把双腿和喙浸入浅水，低头翻动松软的泥沙。而事实上，它们也的确总是在那里，至少远在人类之前就占据了广阔的水域。然而，它们所经历的变化与动荡却往往难以为人所知。每一年，无数的观鸟人在湿地与海岸边缘来来往往，对我们而言，一片滩涂只是一趟旅程的其中一个目的地，而对于鸻鹬，这就是生命的一切——从出生到死亡，无尽的时光像潮水一样在它们脚下流过。它们年年飞越遥远的海面，或终其一生固守同一片水域，直到雏鸟的绒羽和老年个体的尸骸在泥泞中交融，直到生与死共同沉积为故土的一部分。鸻鹬们就这样安稳地存在着，用细长的双翼在一个庞大的世界中撑起微小却顽强的一角。在这里，它们只恪守属于自己的生存法则，低调得几乎不引人瞩目，只有几声与它们的外貌颇不相符的、遥远而高亢的鸣叫能最终穿透寂静的空气——于是一首不为任何人或事物存在的、古老而坚定的歌，就这样越过漫长的演化史，传到了我们耳中。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>转录组基本分析流程</title>
    <url>/posts/3089/</url>
    <content><![CDATA[<h1 id="查询本机线程数与核数"><a href="#查询本机线程数与核数" class="headerlink" title="查询本机线程数与核数"></a>查询本机线程数与核数</h1><p>因为刚接触生信的时候年少无知（？）不敢乱用组里的服务器，所以下面所有转录组分析我都是用自己的电脑跑的，如果像我一样在本地运行Linux系统一定要注意不要超过本机最高的线程数！</p>
<p>打开cmd，输入以下命令：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">wmic</span><br><span class="line">cpu get numberofcores #获取核数</span><br><span class="line">cpu get numberoflogicalprocessors #获取线程数</span><br></pre></td></tr></table></figure>


<h1 id="rawdata质量检测"><a href="#rawdata质量检测" class="headerlink" title="rawdata质量检测"></a>rawdata质量检测</h1><p>（一般需要先组装参考基因组，但由于当时已经有了参考基因组，这部分的转录组分析直接从reads的比对开始）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fastqc -o &#x2F;path&#x2F;to&#x2F;output&#x2F; &#x2F;input&#x2F;data_1.fq &#x2F;input&#x2F;data_2.fq</span><br></pre></td></tr></table></figure>

<p>在/path/to/output/文件夹里会生成每个样品的指控报告</p>
<h1 id="转换gff→gtf注释文件（使用cufflinks的gffread功能）"><a href="#转换gff→gtf注释文件（使用cufflinks的gffread功能）" class="headerlink" title="转换gff→gtf注释文件（使用cufflinks的gffread功能）"></a>转换gff→gtf注释文件（使用cufflinks的gffread功能）</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gffread &#x2F;path&#x2F;to&#x2F;ann.gff -T -o &#x2F;path&#x2F;to&#x2F;ann.gtf</span><br></pre></td></tr></table></figure>


<h1 id="构建index文件（使用hisat2软件，事先建一个具有可读写权限的文件夹-path-to-index并在其中操作）"><a href="#构建index文件（使用hisat2软件，事先建一个具有可读写权限的文件夹-path-to-index并在其中操作）" class="headerlink" title="构建index文件（使用hisat2软件，事先建一个具有可读写权限的文件夹/path/to/index并在其中操作）"></a>构建index文件（使用hisat2软件，事先建一个具有可读写权限的文件夹/path/to/index并在其中操作）</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hisat2_extract_exons.py ann.gtf &gt; exons.txt #提取外显子信息到名叫exons_kp的txt文档</span><br><span class="line">hisat2_extract_splice_sites.py ann.gtf &gt; ss.txt #提取可变剪贴信息到名叫ss_kp的txt文档</span><br><span class="line">hisat2-build -p 2 --ss ss.txt --exon exons.txt refseq.fa data #构建index索引</span><br></pre></td></tr></table></figure>


<h1 id="将样品的reads比对（align）到index索引中（在刚刚建立的index文件夹里使用hisat2软件）"><a href="#将样品的reads比对（align）到index索引中（在刚刚建立的index文件夹里使用hisat2软件）" class="headerlink" title="将样品的reads比对（align）到index索引中（在刚刚建立的index文件夹里使用hisat2软件）"></a>将样品的reads比对（align）到index索引中（在刚刚建立的index文件夹里使用hisat2软件）</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">seqkit fq2fa data_1.fq -o data_1.fa #用seqkit软件将fq转换为fa</span><br><span class="line">seqkit fq2fa data_2.fq -o data_2.fa</span><br><span class="line">hisat2 -f -x &#x2F;path&#x2F;to&#x2F;index&#x2F;data -1 &#x2F;path&#x2F;to&#x2F;data_1.fa -2 &#x2F;path&#x2F;to&#x2F;data_2.fa -S &#x2F;path&#x2F;to&#x2F;out.sam</span><br></pre></td></tr></table></figure>


<h1 id="转换sam文件到bam文件（节省存储空间，使用samtools）"><a href="#转换sam文件到bam文件（节省存储空间，使用samtools）" class="headerlink" title="转换sam文件到bam文件（节省存储空间，使用samtools）"></a>转换sam文件到bam文件（节省存储空间，使用samtools）</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">samtools view -bS out.sam &gt; out.bam</span><br></pre></td></tr></table></figure>


<h1 id="对bam文件进行排序（因为是双端测序，所以需要按照基因名称进行排序，使用samtools-sort功能）"><a href="#对bam文件进行排序（因为是双端测序，所以需要按照基因名称进行排序，使用samtools-sort功能）" class="headerlink" title="对bam文件进行排序（因为是双端测序，所以需要按照基因名称进行排序，使用samtools sort功能）"></a>对bam文件进行排序（因为是双端测序，所以需要按照基因名称进行排序，使用samtools sort功能）</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">samtools sort out.bam -o out_sorted.bam</span><br></pre></td></tr></table></figure>


<h1 id="对排序后的bam文件进行索引生成bai格式文件（samtools-index功能）"><a href="#对排序后的bam文件进行索引生成bai格式文件（samtools-index功能）" class="headerlink" title="对排序后的bam文件进行索引生成bai格式文件（samtools index功能）"></a>对排序后的bam文件进行索引生成bai格式文件（samtools index功能）</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">samtools index index_out_sorted.bam</span><br></pre></td></tr></table></figure>


<h1 id="查看bam文件比对效率（Windows下使用IGV软件进行可视化）"><a href="#查看bam文件比对效率（Windows下使用IGV软件进行可视化）" class="headerlink" title="查看bam文件比对效率（Windows下使用IGV软件进行可视化）"></a>查看bam文件比对效率（Windows下使用IGV软件进行可视化）</h1><h1 id="对回帖bam文件进行质量评估（使用samtools-flagstat功能）"><a href="#对回帖bam文件进行质量评估（使用samtools-flagstat功能）" class="headerlink" title="对回帖bam文件进行质量评估（使用samtools flagstat功能）"></a>对回帖bam文件进行质量评估（使用samtools flagstat功能）</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">samtools flagstat out_sorted.bam &gt; out_sorted.flagstat</span><br><span class="line">cat out_sorted.flagstat</span><br></pre></td></tr></table></figure>


<h1 id="使用htseq对bam文件进行counts计数"><a href="#使用htseq对bam文件进行counts计数" class="headerlink" title="使用htseq对bam文件进行counts计数"></a>使用htseq对bam文件进行counts计数</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">htseq-count -s no -r name -f bam -i transcript_id &#x2F;path&#x2F;to&#x2F;out_sorted.bam &#x2F;path&#x2F;to&#x2F;ann.gtf &gt;&#x2F;path&#x2F;to&#x2F;matrix.count 2&gt; &#x2F;path&#x2F;to&#x2F;counts.log</span><br></pre></td></tr></table></figure>


<h1 id="RStudio安装Bioconductor"><a href="#RStudio安装Bioconductor" class="headerlink" title="RStudio安装Bioconductor"></a>RStudio安装Bioconductor</h1><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!requireNamespace(<span class="string">&quot;BiocManager&quot;</span>, quietly = <span class="literal">TRUE</span>))</span><br><span class="line">    install.packages(<span class="string">&quot;BiocManager&quot;</span>)</span><br><span class="line">BiocManager::install(version = <span class="string">&quot;3.10&quot;</span>)</span><br></pre></td></tr></table></figure>


<h1 id="用RStudio合并counts文件为表达矩阵（以四个样本为例）"><a href="#用RStudio合并counts文件为表达矩阵（以四个样本为例）" class="headerlink" title="用RStudio合并counts文件为表达矩阵（以四个样本为例）"></a>用RStudio合并counts文件为表达矩阵（以四个样本为例）</h1><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">&gt; control1&lt;-read.table(<span class="string">&quot;1.count&quot;</span>,sep = <span class="string">&quot;\t&quot;</span>,col.names = <span class="built_in">c</span>(<span class="string">&quot;transcript_id&quot;</span>,<span class="string">&quot;control1&quot;</span>))</span><br><span class="line">&gt; head(control1)</span><br><span class="line">&gt; control2&lt;-read.table(<span class="string">&quot;2.count&quot;</span>,sep = <span class="string">&quot;\t&quot;</span>,col.names = <span class="built_in">c</span>(<span class="string">&quot;transcript_id&quot;</span>,<span class="string">&quot;control2&quot;</span>))</span><br><span class="line">&gt; treat1&lt;-read.table(<span class="string">&quot;3.count&quot;</span>,sep = <span class="string">&quot;\t&quot;</span>,col.names = <span class="built_in">c</span>(<span class="string">&quot;transcript_id&quot;</span>,<span class="string">&quot;treat1&quot;</span>))</span><br><span class="line">&gt; treat2&lt;-read.table(<span class="string">&quot;4.count&quot;</span>,sep = <span class="string">&quot;\t&quot;</span>,col.names = <span class="built_in">c</span>(<span class="string">&quot;transcript_id&quot;</span>,<span class="string">&quot;treat2&quot;</span>))</span><br><span class="line">&gt; raw_count &lt;- merge(merge(control1, control2, by=<span class="string">&quot;transcript_id&quot;</span>), merge(treat1, treat2, by=<span class="string">&quot;transcript_id&quot;</span>))</span><br><span class="line"><span class="comment"># merge()函数只能从两个数据框中选择，不能超过两个，如果样本重复超过2个，需要进行多次merge操作</span></span><br><span class="line">&gt; head(raw_count)</span><br><span class="line">&gt; tail(raw_count)</span><br><span class="line">&gt; raw_count_filt &lt;- raw_count[-<span class="number">1</span>:-<span class="number">5</span>,]</span><br><span class="line">&gt; head(raw_count_filt)</span><br><span class="line">&gt; readcount&lt;-raw_count_filt[ ,-<span class="number">1</span>]</span><br><span class="line">&gt; write.csv(readcount, file=<span class="string">&#x27;readcount.csv&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h1 id="差异表达分析"><a href="#差异表达分析" class="headerlink" title="差异表达分析"></a>差异表达分析</h1><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">&gt; library(tidyverse)</span><br><span class="line">&gt; library(DESeq2)</span><br><span class="line">&gt; mycounts&lt;-read.csv(<span class="string">&quot;readcount+.csv&quot;</span>)</span><br><span class="line">&gt; head(mycounts)</span><br><span class="line">&gt; rownames(mycounts)&lt;-mycounts[,<span class="number">1</span>]</span><br><span class="line">&gt; mycounts&lt;-mycounts[,-<span class="number">1</span>] <span class="comment">#清掉第一列无用的序号</span></span><br><span class="line">&gt; head(mycounts)</span><br><span class="line">&gt; condition &lt;- factor(<span class="built_in">c</span>(<span class="built_in">rep</span>(<span class="string">&quot;control&quot;</span>,<span class="number">2</span>),<span class="built_in">rep</span>(<span class="string">&quot;treat&quot;</span>,<span class="number">2</span>)), levels = <span class="built_in">c</span>(<span class="string">&quot;control&quot;</span>,<span class="string">&quot;treat&quot;</span>))</span><br><span class="line">&gt; condition</span><br><span class="line">&gt; colData &lt;- data.frame(row.names=colnames(mycounts), condition)</span><br><span class="line">&gt; colData</span><br><span class="line">&gt; dds &lt;- DESeqDataSetFromMatrix(mycounts, colData, design= ~ condition)</span><br><span class="line">&gt; dds &lt;- DESeq(dds)</span><br><span class="line">&gt; dds</span><br><span class="line">&gt; res = results(dds, contrast=<span class="built_in">c</span>(<span class="string">&quot;condition&quot;</span>, <span class="string">&quot;control&quot;</span>, <span class="string">&quot;treat&quot;</span>))</span><br><span class="line">&gt; res= results(dds)</span><br><span class="line">&gt; res = res[order(res$pvalue),]</span><br><span class="line">&gt; head(res)</span><br><span class="line">&gt; summary(res) <span class="comment">#统计差异表达分析结果</span></span><br><span class="line"></span><br><span class="line">out of <span class="number">5403</span> with nonzero total read count</span><br><span class="line">adjusted p-value &lt; <span class="number">0.1</span></span><br><span class="line">LFC &gt; <span class="number">0</span> (up)       : <span class="number">63</span>, <span class="number">1.2</span>%</span><br><span class="line">LFC &lt; 0 (down)     : 15, 0.28%</span><br><span class="line">outliers [<span class="number">1</span>]       : <span class="number">0</span>, <span class="number">0</span>%</span><br><span class="line">low counts [2]     : 4503, 83%</span><br><span class="line">(mean count &lt; <span class="number">1502</span>)</span><br><span class="line">[<span class="number">1</span>] see <span class="string">&#x27;cooksCutoff&#x27;</span> argument of ?results</span><br><span class="line">[<span class="number">2</span>] see <span class="string">&#x27;independentFiltering&#x27;</span> argument of ?results</span><br><span class="line"></span><br><span class="line">&gt; write.csv(res,file=<span class="string">&quot;hahaha.csv&quot;</span>)</span><br><span class="line">&gt; table(res$padj&lt;<span class="number">0.05</span>)</span><br><span class="line"><span class="literal">FALSE</span>  <span class="literal">TRUE</span> </span><br><span class="line">  <span class="number">878</span>    <span class="number">22</span> </span><br></pre></td></tr></table></figure>


<h1 id="绘制PCA图（在已完成上面差异表达基因分析的基础上进行）"><a href="#绘制PCA图（在已完成上面差异表达基因分析的基础上进行）" class="headerlink" title="绘制PCA图（在已完成上面差异表达基因分析的基础上进行）"></a>绘制PCA图（在已完成上面差异表达基因分析的基础上进行）</h1><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">&gt; vsdata &lt;- vst(dds, blind=<span class="literal">FALSE</span>)</span><br><span class="line">&gt; plotPCA(vsdata, intgroup=<span class="string">&quot;condition&quot;</span>)</span><br></pre></td></tr></table></figure>


<h1 id="绘制热图（在已完成上面差异表达基因分析的基础上进行）"><a href="#绘制热图（在已完成上面差异表达基因分析的基础上进行）" class="headerlink" title="绘制热图（在已完成上面差异表达基因分析的基础上进行）"></a>绘制热图（在已完成上面差异表达基因分析的基础上进行）</h1><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">&gt; library(<span class="string">&quot;pheatmap&quot;</span>)</span><br><span class="line">&gt; select&lt;-order(rowMeans(counts(dds, normalized = <span class="literal">TRUE</span>)), decreasing = <span class="literal">TRUE</span>)[<span class="number">1</span>:<span class="number">20</span>]</span><br><span class="line">&gt; df &lt;- as.data.frame(colData(dds)[,<span class="built_in">c</span>(<span class="string">&quot;condition&quot;</span>,<span class="string">&quot;sizeFactor&quot;</span>)])</span><br><span class="line">&gt; ntd &lt;- normTransform(dds)</span><br><span class="line">&gt; pheatmap(assay(ntd)[select,], cluster_rows=<span class="literal">FALSE</span>, show_rownames=<span class="literal">FALSE</span>, cluster_cols=<span class="literal">FALSE</span>, annotation_col=df)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>生信分析</category>
      </categories>
      <tags>
        <tag>转录组</tag>
      </tags>
  </entry>
</search>
