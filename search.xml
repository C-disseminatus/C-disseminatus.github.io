<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GitHub Pages + Hexo搭建博客流程</title>
    <url>/posts/391/</url>
    <content><![CDATA[<h1 id="本地安装nodejs"><a href="#本地安装nodejs" class="headerlink" title="本地安装nodejs"></a>本地安装nodejs</h1><p>下载网址：<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a><br>选择版本：node-v14.16.0-x64.msi（长期支持版）<br>默认参数安装，占用内存约53M</p>
<h1 id="本地安装git"><a href="#本地安装git" class="headerlink" title="本地安装git"></a>本地安装git</h1><p>下载网址：<a href="https://gitforwindows.org/">https://gitforwindows.org/</a><br>选择版本：Git-2.30.2-64-bit.exe<br>默认参数安装，占用内存约260M</p>
<h1 id="本地新建存放博客文件的专用文件夹"><a href="#本地新建存放博客文件的专用文件夹" class="headerlink" title="本地新建存放博客文件的专用文件夹"></a>本地新建存放博客文件的专用文件夹</h1><p>进入此文件夹，右键选择“git bash here”，逐行执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo g</span><br><span class="line">hexo s #执行此行后会生成博客主页的本地访问链接，在浏览器中访问 http:&#x2F;&#x2F;localhost:4000 可以预览。预览结束后ctrl+c关闭</span><br></pre></td></tr></table></figure>

<h1 id="连接git到本地"><a href="#连接git到本地" class="headerlink" title="连接git到本地"></a>连接git到本地</h1><p>继续在git bash界面中执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;usrname&quot;</span><br><span class="line">git config --global user.email &quot;email@address&quot;</span><br></pre></td></tr></table></figure>
<p>用户名和邮箱与注册GitHub账号用的保持一致</p>
<p>生成密钥文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;email@address&quot;</span><br></pre></td></tr></table></figure>
<p>之后连按三次回车，在C:\Users\yourname\.ssh文件夹下找到一个叫“id_rsa.pub”的文件，用notepad打开后复制全部内容，在github主页settings找到SSH and GPG keys，添加ssh key，随便起一个名字，把复制的内容粘贴进框里。此时注册GitHub的邮箱应该会收到一封提示“新的密钥已添加”的邮件。</p>
<p>在git bash中继续执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>选择“yes”，此时会显示用户名，说明已经连接成功。</p>
<p>打开博客根目录下的_config.yml文件<br>修改url处的配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://usrname.github.io/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span> <span class="comment">#如果博客存放在子目录，这里就写“root: /usrname.github.io/”</span></span><br></pre></td></tr></table></figure>

<p>修改最后一行的配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:usrname/usrname.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure>
<p>repository修改为自己的github项目地址</p>
<h1 id="发布博文，并将原始文档上传至github-repository"><a href="#发布博文，并将原始文档上传至github-repository" class="headerlink" title="发布博文，并将原始文档上传至github repository"></a>发布博文，并将原始文档上传至github repository</h1><p>在git bash安装如下扩展：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i hexo-deployer-git</span><br></pre></td></tr></table></figure>

<p>然后输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new post &quot;title&quot;</span><br></pre></td></tr></table></figure>
<p>新建一篇标题为“title”的文章</p>
<p>然后打开path\to\Blog\source\_posts<br>下面会多出一个.md文件</p>
<p>编写完markdown文件后，根目录下输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>生成静态网页，然后输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>进行发布效果的本地预览，按ctrl+c结束预览。最后输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>将刚刚的博文内容上传到github repository。此时打开github.io主页可看到刚刚发布的文章文件（通常来说需要等一段时间才能完成渲染）</p>
<h1 id="修改了本地博文-更换主题后的操作"><a href="#修改了本地博文-更换主题后的操作" class="headerlink" title="修改了本地博文/更换主题后的操作"></a>修改了本地博文/更换主题后的操作</h1><p>清理页面缓存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<p>生成渲染，并在本地查看预览效果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g &amp; hexo s</span><br></pre></td></tr></table></figure>

<p>同步至GitHub pages</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<h1 id="更换GitHub用户名后的操作"><a href="#更换GitHub用户名后的操作" class="headerlink" title="更换GitHub用户名后的操作"></a>更换GitHub用户名后的操作</h1><p>把github上的repository仓库名更换为与用户名一致<br>然后打开blog本地文件夹，更改_config.yml文件：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://newusrname.github.io/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:newusrname/newusrname.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure>

<h1 id="修改默认的文章链接生成格式"><a href="#修改默认的文章链接生成格式" class="headerlink" title="修改默认的文章链接生成格式"></a>修改默认的文章链接生成格式</h1><p>在博客文件夹内安装hexo-abbrlink插件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>
<p>可能出现各种dependency错误，按照需求把缺失的dependency用<code>npm install</code>安装即可<br>修改博客配置文件：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink/</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc16</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">dec</span></span><br></pre></td></tr></table></figure>
<p>配置生效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>


<h1 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h1><ol>
<li><a href="https://mfrank2016.github.io/breeze-blog/2020/05/02/hexo/hexo-start/">https://mfrank2016.github.io/breeze-blog/2020/05/02/hexo/hexo-start/</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/35668237">https://zhuanlan.zhihu.com/p/35668237</a></li>
<li><a href="https://blog.csdn.net/as480133937/article/details/100138838">https://blog.csdn.net/as480133937/article/details/100138838</a></li>
</ol>
]]></content>
      <categories>
        <category>博客建站</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
        <tag>博客建站</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/16107/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>博客建站</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>鸻鹬的冬天无人知晓</title>
    <url>/posts/3089/</url>
    <content><![CDATA[<p>2013年的青海，一只金眶鸻沿着刚退下的湖水走过。旅游旺季带来的人群往往汇集在其他几个更为成熟的旅游区，因此显然没给它在这片僻静角落的生活带来多少影响。尽管如此，它的步伐依然细碎而谨慎。它偶尔会停下来抖一抖自己的毛，再顺势打量一番周遭的环境。在它身后，还在读高中的我正拿着刚买不久的《中国鸟类野外手册》，在湖边的大风中一边按着自己随时会被吹走的帽子，一边在图片页反复翻找它的身影。这是我在野外自己辨认出的第一个个人新种，也是我与这类水鸟相识的起点。</p>
<p>鸻鹬，实际上是由“鸻”和“鹬”两类不同的鸟共同构成的词。前者指的是鸻形目鸻科的鸟类，它们体型较小，站立的姿态往往让它们看上去好像没有脖子，远看只像是一些椭圆的小球，而后者通常指鸻形目鹬科、彩鹬科、反嘴鹬科或砺鹬科的鸟类，相比鸻而言体型稍大，站姿也更舒展挺拔。初看这些小鸟，很多人都觉得它们实在是很不起眼。它们要么长得十分低调，只有在繁殖季才会换上稍显亮色的羽毛，要么习性也很低调，出没于少有人打扰的水域，警觉地留意着周边一切潜在的威胁。</p>
<p>即便如此，在我有限的观鸟经历中，鸻鹬们也总是非常特殊的。我并不是一个狂热的推鸟人。比起为了亲眼目睹一种特定的鸟而不远万里奔赴外地，观察那些常见的、稳定的和出没相对规律的鸟类总能给我带来更大的快乐，这其中必然也包括活跃于水潭和海边的鸻鹬。事实上，在拥有了属于自己的望远镜以后，它们很快就成了我镜筒中的常客。</p>
<p>我喜欢观察它们。它们的行动风格在众多鸟类中仿佛自成一派——很少有什么动物像鸻鹬一样给人一种“既悠闲又警惕”的印象。海边的鸻鹬们往往在低潮时出现在浅滩上，搜寻泥沙中的食物。在它们不受惊扰的时候，这样的搜寻往往会持续相当长的时间，甚至足以让我一边架着单筒欣赏一边和朋友闲谈。而一旦受惊，这种安闲的状态就会立刻被打破。它们会群起四散，惊慌的气氛从鸟群的一角迅速传向另一角，之前还安闲自得的鸻鹬们可以在短短几秒之内完成反应，从身边其他个体的动作中获知可能遭遇的危险，并跟随同类飞向更安全的其他地方。当然，这种场景在岭南地区的冬季更容易出现，因为许多常见的鸻鹬类会进行迁徙，年复一年地在繁殖地与越冬地之间往返，并在冬天大量汇集至作为越冬地之一的华南沿海。迁徙行为的成因至今仍是许多学者研究的重点，而对于大多数普通人而言，这种一年一度的盛会往往有另一个层面的震撼力。</p>
<p>2018年7月，当我在内蒙古东北部国道边的一小片湿地看到那些悠闲踱步的黑翅长脚鹬时，几乎立刻就萌生了一种怪异的陌生感。在华南沿海地带，它们是常见的越冬水鸟之一，也是南方冬季水域景观的一部分。而在这里，它们随着春夏的暖意而来，在北方繁殖自己的下一代。平日里难以亲眼见证的迁徙，就这样悄无声息地展露在我眼前，其跨度不只有时间，还有空间。我第一次意识到，无论在何时何地，我们所见的鸻鹬都只是它们一生中的一小部分。在我们不曾抵达的远方，它们还拥有另一种不为人知的新生活——羽色黯淡的寒冷冬季，或是披挂着鲜亮繁殖羽的、忙于照料下一代的春夏季。</p>
<p>长久以来，人们似乎已经惯于给水鸟的迁徙赋予无数人格化的情感寄托。在人类社会尚未广泛受益于横渡大洋的技术时，鸻鹬们就已经以一年一度的迁飞为生。完全可以理解，对于一个无法轻易到达海的另一端的人而言，每年按时出现在海边的鸻鹬不仅寄托着自己对远方的憧憬和向往，更是一种在快速变化的世界中难得的相对恒定的事物。人们在鸻鹬身上寄托的情感，比起为其赋予人格，更像是一种纾解无法实现的探寻欲望的表现。通过想象那些无法亲眼见证的鸻鹬生活图景，我们得以参与到这场跨时空的盛事中，并完成某种超越平凡的精神体验。对于像我一样常年居住在同一个地方的人，是迁徙的鸟带来了我们无法亲身经历的四季。</p>
<p>当然，对于鸻鹬自己，这种长距离迁飞的行为本身也许并不具备如人们所想象那般浓重的情感色彩，也并非为了实现什么所谓的“回家的承诺”，而是由一系列复杂的生化反应和环境因素共同驱动的必然结果，一种在收益与风险之间做出的权衡。作为演化的结果，四季的交替早已被刻进了鸻鹬的身体，最终凝结在它们的双翼上。对于这些迁徙的个体，它们的生命得以跨越人类无法轻易跨越的山河湖海，并终于在不断的繁衍生息中磨平了时空的棱角。</p>
<p>而鸻鹬身上蕴藏的诗意远不止于此。除了奇异的长距离迁徙以外，鸻鹬类的种群历史往往也具有相当重要的启发意义。生活在海边的鸻鹬类，其种群动态往往与海洋的历史变动息息相关，通过计算模拟还原的鸻鹬种群规模更是一种对海洋变化的侧面反映。随着技术的更迭，如今的研究者已经可以利用鸻鹬的基因测序结果模拟其所属种群规模随时间变化的图景。类似的研究方法得到的远不只是单个种群的历史。一次次种群扩张与骤减，就像海边的一次次潮起与潮落——这是一张鸻鹬生命的潮汐表。依靠海洋生活的物种在漫长的时光中逐渐成为了海的一部分，它们的生命从此与海洋的动态变化密不可分，在海洋深刻影响着它们的同时，我们也得以从它们身上探寻地球环境的过往。海的历史被写进了鸻鹬的基因里，人们也通过这种方式短暂地窥视着自己无法真正触及的永恒。</p>
<p>与行动敏捷、神出鬼没的林鸟不同的是，这些水鸟似乎很容易给人一种“稳定而无趣”的错觉——它们不会在同一片树林的不同角落突然闪现又消失，让观鸟人为自己偶尔几秒的走神和疏忽而懊恼不已，更很少像那些偶尔被台风送来的迷鸟一样吸引大推们千里迢迢赶来。对于平日里并不观鸟的人们来说，也极少有谁会发觉一群觅食的鸻鹬当中什么时候多了或少了一些物种。它们就像总是在那里，在开阔的水边或小水沟旁时停时走，灵巧地躲避卷上沙滩的海浪，或是把双腿和喙浸入浅水，低头翻动松软的泥沙。而事实上，它们也的确总是在那里，至少远在人类之前就占据了广阔的水域。然而，它们所经历的变化与动荡却往往难以为人所知。每一年，无数的观鸟人在湿地与海岸边缘来来往往，对我们而言，一片滩涂只是一趟旅程的其中一个目的地，而对于鸻鹬，这就是生命的一切——从出生到死亡，无尽的时光像潮水一样在它们脚下流过。它们年年飞越遥远的海面，或终其一生固守同一片水域，直到雏鸟的绒羽和老年个体的尸骸在泥泞中交融，直到生与死共同沉积为故土的一部分。鸻鹬们就这样安稳地存在着，用细长的双翼在一个庞大的世界中撑起微小却顽强的一角。在这里，它们只恪守属于自己的生存法则，低调得几乎不引人瞩目，只有几声与它们的外貌颇不相符的、遥远而高亢的鸣叫能最终穿透寂静的空气——于是一首不为任何人或事物存在的、古老而坚定的歌，就这样越过漫长的演化史，传到了我们耳中。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>转录组基本分析流程</title>
    <url>/posts/58910/</url>
    <content><![CDATA[<h1 id="查询本机线程数与核数"><a href="#查询本机线程数与核数" class="headerlink" title="查询本机线程数与核数"></a>查询本机线程数与核数</h1><p>因为刚接触生信的时候年少无知（？）不敢乱用组里的服务器，所以下面所有转录组分析我都是用自己的电脑跑的，如果像我一样在本地运行Linux系统一定要注意不要超过本机最高的线程数！</p>
<p>打开cmd，输入以下命令：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">wmic</span><br><span class="line">cpu get numberofcores #获取核数</span><br><span class="line">cpu get numberoflogicalprocessors #获取线程数</span><br></pre></td></tr></table></figure>


<h1 id="rawdata质量检测"><a href="#rawdata质量检测" class="headerlink" title="rawdata质量检测"></a>rawdata质量检测</h1><p>（一般需要先组装参考基因组，但由于当时已经有了参考基因组，这部分的转录组分析直接从reads的比对开始）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fastqc -o &#x2F;path&#x2F;to&#x2F;output&#x2F; &#x2F;input&#x2F;data_1.fq &#x2F;input&#x2F;data_2.fq</span><br></pre></td></tr></table></figure>

<p>在/path/to/output/文件夹里会生成每个样品的指控报告</p>
<h1 id="将gff注释转成gtf格式"><a href="#将gff注释转成gtf格式" class="headerlink" title="将gff注释转成gtf格式"></a>将gff注释转成gtf格式</h1><p>（使用cufflinks的gffread功能）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gffread &#x2F;path&#x2F;to&#x2F;ann.gff -T -o &#x2F;path&#x2F;to&#x2F;ann.gtf</span><br></pre></td></tr></table></figure>


<h1 id="构建index文件"><a href="#构建index文件" class="headerlink" title="构建index文件"></a>构建index文件</h1><p>（使用hisat2软件，事先建一个具有可读写权限的文件夹/path/to/index并在其中操作）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hisat2_extract_exons.py ann.gtf &gt; exons.txt #提取外显子信息到名叫exons的txt文档</span><br><span class="line">hisat2_extract_splice_sites.py ann.gtf &gt; ss.txt #提取可变剪贴信息到名叫ss的txt文档</span><br><span class="line">hisat2-build -p 2 --ss ss.txt --exon exons.txt refseq.fa data #构建index索引，里面的小文件命名为data</span><br></pre></td></tr></table></figure>


<h1 id="将样品的reads比对到index索引中"><a href="#将样品的reads比对到index索引中" class="headerlink" title="将样品的reads比对到index索引中"></a>将样品的reads比对到index索引中</h1><p>（在刚刚建立的index/data文件夹里使用hisat2软件）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">seqkit fq2fa data_1.fq -o data_1.fa #用seqkit软件将fq转换为fa</span><br><span class="line">seqkit fq2fa data_2.fq -o data_2.fa</span><br><span class="line">hisat2 -f -x &#x2F;path&#x2F;to&#x2F;index&#x2F;data -1 &#x2F;path&#x2F;to&#x2F;data_1.fa -2 &#x2F;path&#x2F;to&#x2F;data_2.fa -S &#x2F;path&#x2F;to&#x2F;out.sam</span><br></pre></td></tr></table></figure>


<h1 id="转换sam文件到bam文件"><a href="#转换sam文件到bam文件" class="headerlink" title="转换sam文件到bam文件"></a>转换sam文件到bam文件</h1><p>（节省存储空间，使用samtools）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">samtools view -bS out.sam &gt; out.bam</span><br></pre></td></tr></table></figure>


<h1 id="对bam文件进行排序"><a href="#对bam文件进行排序" class="headerlink" title="对bam文件进行排序"></a>对bam文件进行排序</h1><p>（因为是双端测序，所以需要按照基因名称进行排序，使用samtools sort功能）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">samtools sort out.bam -o out_sorted.bam</span><br></pre></td></tr></table></figure>


<h1 id="对排序后的bam文件进行索引"><a href="#对排序后的bam文件进行索引" class="headerlink" title="对排序后的bam文件进行索引"></a>对排序后的bam文件进行索引</h1><p>（使用samtools index功能，生成bai格式文件）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">samtools index index_out_sorted.bam</span><br></pre></td></tr></table></figure>


<h1 id="查看bam文件比对效率"><a href="#查看bam文件比对效率" class="headerlink" title="查看bam文件比对效率"></a>查看bam文件比对效率</h1><p>（Windows下使用IGV软件进行可视化）</p>
<h1 id="对回帖bam文件进行质量评估"><a href="#对回帖bam文件进行质量评估" class="headerlink" title="对回帖bam文件进行质量评估"></a>对回帖bam文件进行质量评估</h1><p>（使用samtools flagstat功能）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">samtools flagstat out_sorted.bam &gt; out_sorted.flagstat</span><br><span class="line">cat out_sorted.flagstat</span><br></pre></td></tr></table></figure>


<h1 id="对bam文件进行counts计数"><a href="#对bam文件进行counts计数" class="headerlink" title="对bam文件进行counts计数"></a>对bam文件进行counts计数</h1><p>（使用htseq软件）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">htseq-count -s no -r name -f bam -i transcript_id &#x2F;path&#x2F;to&#x2F;out_sorted.bam &#x2F;path&#x2F;to&#x2F;ann.gtf &gt;&#x2F;path&#x2F;to&#x2F;matrix.count 2&gt; &#x2F;path&#x2F;to&#x2F;counts.log</span><br></pre></td></tr></table></figure>


<h1 id="RStudio安装Bioconductor"><a href="#RStudio安装Bioconductor" class="headerlink" title="RStudio安装Bioconductor"></a>RStudio安装Bioconductor</h1><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!requireNamespace(<span class="string">&quot;BiocManager&quot;</span>, quietly = <span class="literal">TRUE</span>))</span><br><span class="line">    install.packages(<span class="string">&quot;BiocManager&quot;</span>)</span><br><span class="line">BiocManager::install(version = <span class="string">&quot;3.10&quot;</span>)</span><br></pre></td></tr></table></figure>


<h1 id="合并表达矩阵"><a href="#合并表达矩阵" class="headerlink" title="合并表达矩阵"></a>合并表达矩阵</h1><p>（使用RStudio，以四个样本为例）</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">&gt; control1&lt;-read.table(<span class="string">&quot;1.count&quot;</span>,sep = <span class="string">&quot;\t&quot;</span>,col.names = <span class="built_in">c</span>(<span class="string">&quot;transcript_id&quot;</span>,<span class="string">&quot;control1&quot;</span>))</span><br><span class="line">&gt; head(control1)</span><br><span class="line">&gt; control2&lt;-read.table(<span class="string">&quot;2.count&quot;</span>,sep = <span class="string">&quot;\t&quot;</span>,col.names = <span class="built_in">c</span>(<span class="string">&quot;transcript_id&quot;</span>,<span class="string">&quot;control2&quot;</span>))</span><br><span class="line">&gt; treat1&lt;-read.table(<span class="string">&quot;3.count&quot;</span>,sep = <span class="string">&quot;\t&quot;</span>,col.names = <span class="built_in">c</span>(<span class="string">&quot;transcript_id&quot;</span>,<span class="string">&quot;treat1&quot;</span>))</span><br><span class="line">&gt; treat2&lt;-read.table(<span class="string">&quot;4.count&quot;</span>,sep = <span class="string">&quot;\t&quot;</span>,col.names = <span class="built_in">c</span>(<span class="string">&quot;transcript_id&quot;</span>,<span class="string">&quot;treat2&quot;</span>))</span><br><span class="line">&gt; raw_count &lt;- merge(merge(control1, control2, by=<span class="string">&quot;transcript_id&quot;</span>), merge(treat1, treat2, by=<span class="string">&quot;transcript_id&quot;</span>))</span><br><span class="line"><span class="comment"># merge()函数只能从两个数据框中选择，不能超过两个，如果样本重复超过2个，需要进行多次merge操作</span></span><br><span class="line">&gt; head(raw_count)</span><br><span class="line">&gt; tail(raw_count)</span><br><span class="line">&gt; raw_count_filt &lt;- raw_count[-<span class="number">1</span>:-<span class="number">5</span>,]</span><br><span class="line">&gt; head(raw_count_filt)</span><br><span class="line">&gt; readcount&lt;-raw_count_filt[ ,-<span class="number">1</span>]</span><br><span class="line">&gt; write.csv(readcount, file=<span class="string">&#x27;readcount.csv&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h1 id="差异表达分析"><a href="#差异表达分析" class="headerlink" title="差异表达分析"></a>差异表达分析</h1><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">&gt; library(tidyverse)</span><br><span class="line">&gt; library(DESeq2)</span><br><span class="line">&gt; mycounts&lt;-read.csv(<span class="string">&quot;readcount+.csv&quot;</span>)</span><br><span class="line">&gt; head(mycounts)</span><br><span class="line">&gt; rownames(mycounts)&lt;-mycounts[,<span class="number">1</span>]</span><br><span class="line">&gt; mycounts&lt;-mycounts[,-<span class="number">1</span>] <span class="comment">#清掉第一列无用的序号</span></span><br><span class="line">&gt; head(mycounts)</span><br><span class="line">&gt; condition &lt;- factor(<span class="built_in">c</span>(<span class="built_in">rep</span>(<span class="string">&quot;control&quot;</span>,<span class="number">2</span>),<span class="built_in">rep</span>(<span class="string">&quot;treat&quot;</span>,<span class="number">2</span>)), levels = <span class="built_in">c</span>(<span class="string">&quot;control&quot;</span>,<span class="string">&quot;treat&quot;</span>))</span><br><span class="line">&gt; condition</span><br><span class="line">&gt; colData &lt;- data.frame(row.names=colnames(mycounts), condition)</span><br><span class="line">&gt; colData</span><br><span class="line">&gt; dds &lt;- DESeqDataSetFromMatrix(mycounts, colData, design= ~ condition)</span><br><span class="line">&gt; dds &lt;- DESeq(dds)</span><br><span class="line">&gt; dds</span><br><span class="line">&gt; res = results(dds, contrast=<span class="built_in">c</span>(<span class="string">&quot;condition&quot;</span>, <span class="string">&quot;control&quot;</span>, <span class="string">&quot;treat&quot;</span>))</span><br><span class="line">&gt; res= results(dds)</span><br><span class="line">&gt; res = res[order(res$pvalue),]</span><br><span class="line">&gt; head(res)</span><br><span class="line">&gt; summary(res) <span class="comment">#统计差异表达分析结果</span></span><br><span class="line"></span><br><span class="line">out of <span class="number">5403</span> with nonzero total read count</span><br><span class="line">adjusted p-value &lt; <span class="number">0.1</span></span><br><span class="line">LFC &gt; <span class="number">0</span> (up)       : <span class="number">63</span>, <span class="number">1.2</span>%</span><br><span class="line">LFC &lt; 0 (down)     : 15, 0.28%</span><br><span class="line">outliers [<span class="number">1</span>]       : <span class="number">0</span>, <span class="number">0</span>%</span><br><span class="line">low counts [2]     : 4503, 83%</span><br><span class="line">(mean count &lt; <span class="number">1502</span>)</span><br><span class="line">[<span class="number">1</span>] see <span class="string">&#x27;cooksCutoff&#x27;</span> argument of ?results</span><br><span class="line">[<span class="number">2</span>] see <span class="string">&#x27;independentFiltering&#x27;</span> argument of ?results</span><br><span class="line"></span><br><span class="line">&gt; write.csv(res,file=<span class="string">&quot;hahaha.csv&quot;</span>)</span><br><span class="line">&gt; table(res$padj&lt;<span class="number">0.05</span>)</span><br><span class="line"><span class="literal">FALSE</span>  <span class="literal">TRUE</span> </span><br><span class="line">  <span class="number">878</span>    <span class="number">22</span> </span><br></pre></td></tr></table></figure>


<h1 id="绘制PCA图"><a href="#绘制PCA图" class="headerlink" title="绘制PCA图"></a>绘制PCA图</h1><p>（在已完成上面差异表达基因分析的基础上进行）</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">&gt; vsdata &lt;- vst(dds, blind=<span class="literal">FALSE</span>)</span><br><span class="line">&gt; plotPCA(vsdata, intgroup=<span class="string">&quot;condition&quot;</span>)</span><br></pre></td></tr></table></figure>


<h1 id="绘制热图"><a href="#绘制热图" class="headerlink" title="绘制热图"></a>绘制热图</h1><p>（在已完成上面差异表达基因分析的基础上进行）</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">&gt; library(<span class="string">&quot;pheatmap&quot;</span>)</span><br><span class="line">&gt; select&lt;-order(rowMeans(counts(dds, normalized = <span class="literal">TRUE</span>)), decreasing = <span class="literal">TRUE</span>)[<span class="number">1</span>:<span class="number">20</span>]</span><br><span class="line">&gt; df &lt;- as.data.frame(colData(dds)[,<span class="built_in">c</span>(<span class="string">&quot;condition&quot;</span>,<span class="string">&quot;sizeFactor&quot;</span>)])</span><br><span class="line">&gt; ntd &lt;- normTransform(dds)</span><br><span class="line">&gt; pheatmap(assay(ntd)[select,], cluster_rows=<span class="literal">FALSE</span>, show_rownames=<span class="literal">FALSE</span>, cluster_cols=<span class="literal">FALSE</span>, annotation_col=df)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>生信分析</category>
      </categories>
      <tags>
        <tag>转录组</tag>
        <tag>生信</tag>
      </tags>
  </entry>
  <entry>
    <title>西西弗神话 - 摘抄</title>
    <url>/posts/24235/</url>
    <content><![CDATA[<h1 id="荒诞推理"><a href="#荒诞推理" class="headerlink" title="荒诞推理"></a>荒诞推理</h1><ol>
<li><p>较低一个层次，就是诡谲性：发觉世界是“厚实”的，瞥见一块石头有多么的奇异，都叫我们无可奈何；大自然，比如一片风景，可以根本不理会我们。一切自然美的深处都藏着某些不合人情的东西，连绵山丘、柔媚天色、婆娑树荫，霎时间便失去了我们所赋予的幻想意义，从此比失去的天堂更遥远了。<u><em>世界原始的敌意，穿越几千年，又追向我们。</em></u>一时间我们莫名其妙，因为几百年间我们只是凭借形象和图画理解世界，而且这些形象和图画是我们预先赋予世界的，从此之后再使用这种人为的手段，我们就力莫能及了。世界逃脱了我们，再次显现出自己的本色。那些惯于蒙面的背景又恢复了本来面目，远离我们而去。</p>
</li>
<li><p>恐惧实际上来自事变毋庸置疑的层面。时间之所以使我们害怕，是时间展现数学般的演示，答案来自演示之后。所以关于灵魂的种种漂亮说法，在这里至少要稍为接受经验法对其对立面的检验。耳光括在僵死的躯体上留不下痕迹，灵魂已经出窍了。经历这个基本的、关键的层面，构成了荒诞感的内容。无用感在这种命运的死亡阴影下萌发了。血迹斑斑的数学规律支配着我们的生存状况，对此，任何道德、任何拼搏都无法先验地解释清楚。</p>
</li>
<li><p>所谓无意识感，就是强求亲切，渴望明了。<u><em>就人而言，理解世界，就是迫使世界具有人性，在世界上烙下人的印记。</em></u></p>
</li>
<li><p>假如我试图把握我所确认的这个我，并加以定位和概括，那么这个我只不过是一掬之水，会从我的指缝流走。我可以把“这个我”会摆出的各种面孔一张张描绘出来，还可以描绘别人给予“这个我”的各种面貌，包括其出身、教育、热忱或沉默、伟大或卑劣。但不可把面貌相加。这颗心即使属于我，我也永远无法确定。我对自己存在的确信和我对这种确信试图赋予的内容，两者之间的鸿沟，永远也填不满。<u><em>我永远是自己的陌路人。</em></u></p>
</li>
<li><p>瞧，比如树木吧，我熟悉树木的粗糙、水分，嗅得出树木的气味。草的芬芳，星的馥郁，夜晚，心情舒坦的某些晚上，我怎能否认我体验到了强而有力的世界？<u><em>然而，地球上的全部科学，压根儿不能使我确信这个世界是属于我的。</em></u>你们给我描绘世界，教我归类世界。你们列举地球的规律，在我渴求知识的时候，我同意地球的规律是真实的。你们剖析地球的机制，于是我的希望为之倍增。末了，你们告诉我神奇美好又多姿多彩的宇宙归结为原子，而原子又归结为电子。所有这一切好得很，我等着你们继往开来。但你们对我说有一种见不着的星球系统，有不少电子围绕一个核团团转动。你们用形象向我解释了世界。于是我看出你们是在做诗，那我就一辈子也弄不清楚了。我还没来得及发火，你们已经改变理论了，难道不是这样吗？这么说来，<u><em>本该教我懂得一切的科学在假设中就结束了，清醒的认识在隐喻中沉没了，不确定性在艺术作品中找到了归宿。</em></u>难道我先前需要付出这么多努力吗？与之相比，山丘柔和的线条和夜晚摸着激跳的心口，教给我更多的东西。言归正传，<u><em>如果说我通过科学懂得现象并一一历数，我却不能因此而说已理解世界。即使我用脚丈量过全球的高山峻岭，也不会知道得更多。</em></u>你们让我在写实和假设之间选择，写实是可靠的，但对我毫无教益，而假设即便对我有教益，却根本不可靠。我对自己对世界都陌生，唯一可依赖的，是用某种思想武装起来，而这种思想一旦肯定什么就否定自身；我惟有拒绝认知和摒弃生命才能得到安宁，而且好胜的愿望总是在藐视其冲击的藩篱上碰壁，这是怎样的状况呢？有志者，必挑起悖论。一切就绪，按部就班，就等着出现中了毒的安宁，那正是无忧无虑、心灵麻木或致命的摒弃所造成的。</p>
</li>
<li><p>海德格尔冷峻地审视了人生状况，宣告人类生存受到了凌辱。唯一的现实，是生灵在各个阶段的“忧虑”。对迷途于世的人及其排遣而言，这忧虑是一种转瞬即逝的恐慌。但恐慌一旦意识到自身，便成为焦虑，即清醒者永久的氛围，“在这种氛围中生存重新抬头”。这位教授使用最抽象的语言，手不发抖地写道：“人类生存的完整性和局限性比人本身处于更优先的地位。”</p>
</li>
<li><p>谢斯托夫独占一方，一直致力于单调得叫人钦佩的著作，始终不懈地朝着同样的真理奋进。他屡屡指出，最严密的体系，最普遍的理性主义，到头来终将在人类思想的非理性上碰壁。</p>
</li>
</ol>
<h1 id="哲学的自杀"><a href="#哲学的自杀" class="headerlink" title="哲学的自杀"></a>哲学的自杀</h1><ol>
<li><p>生活在这种令人窒息的天空下，迫使人要么出走，要么留下。问题是要知道，在第一种情况下如何出走，在第二种情况下为何留下。</p>
</li>
<li><p>从智力上看问题，我可以说荒诞不在于人（如果这样的隐喻有意义的话），也不在于世界，而在于两者的共同存在。</p>
</li>
<li><p>把这种荒诞逻辑推至极限时，我应当承认，这种斗争意味着彻底缺乏希望（跟绝望毫不相干），意味着不断的拒绝（不应与弃绝相混淆）以及意识到的不满足（不要联想到青春不安）。一切破坏、回避或缩小这些要求的（首先是赞同取消分离），都有损于荒诞并贬低了由此可能提建议的态度。<u><em>只有在不赞同荒诞的条件下，荒诞才有意义。</em></u></p>
</li>
<li><p>人一旦意识到荒诞，就永远与荒诞绑在一起了。一个人没有希望，并意识到没有希望，就不再属于未来了。这是天意。但世人竭力逃脱自己创造的世界，也是天意呀。</p>
</li>
<li><p>为此，我要重提谢斯托夫。一位评论家援引他的一句话，值得注意：“唯一真正的出路恰恰处在人类判断没有出路的地方。否则我们需要上帝干吗？我们转向上帝只是为了得到不可能得到的东西。至于可以得到的，世人足以对付得了。”如果说有什么谢斯托夫的哲学，我可以说他的哲学完全由这句话概括了。谢斯托夫作了充满激情的分析之后，发现了一切存在的基本荒诞性，他不说“这就是荒诞”，而说“这就是上帝：还是拜托上帝为上策，即使上帝不适合我们任何一种理性范畴”。为了不至于发生混淆，这位俄国哲学家甚至暗示上帝也许是记恨的、可憎的、不可理喻的、矛盾百出的，但只要上帝的面目是最可怕的，就可确定其强大。<u><em>上帝的伟大，在于叫人摸不着头脑；上帝的证据，在于不通人情世故。</em></u>哲学家必须自身跃进，并通过这个飞跃来摆脱理性幻想。因此，谢斯托夫认为，<u><em>接受荒诞的同时，就是荒诞本身的体现。证实荒诞等于接受荒诞。</em></u></p>
</li>
<li><p>绝对否定理性是徒劳无益的。理性有自己的范畴，在自己的范畴里是有效的。这正是人类经验的范畴。所以我们想要把一切都搞个水落石出。反之，我们之所以不能把什么都搞清楚，荒诞之所以应运而生，恰恰因为碰上了有效而有限的理性，碰上了不断再生的非理性。</p>
</li>
</ol>
<p>tbc.</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>一个超简单的admixture结果排序脚本</title>
    <url>/posts/64483/</url>
    <content><![CDATA[<p>刚开始用admixture做种群结构分析的时候还没开始学perl和python（虽然现在也没学会多少），每次做出结果都只会按vcf默认的顺序排列作图，做完了再用ai慢慢挪动条形图。学了编程以后发现竟然就这就能搞定了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">q = <span class="built_in">open</span>(<span class="string">&quot;output.Q&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line"></span><br><span class="line">line = q.readlines()</span><br><span class="line">print(line[<span class="number">65</span>],line[<span class="number">66</span>],……,line[<span class="number">64</span>]) <span class="comment">#这里用的其实还是笨办法，手动把样品顺序全部罗列一遍。理论上也可以用字符串自动比对来实现</span></span><br><span class="line"></span><br><span class="line">q.close()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>生信分析</category>
      </categories>
      <tags>
        <tag>生信</tag>
        <tag>基因组</tag>
      </tags>
  </entry>
  <entry>
    <title>用ReLERNN计算全基因组重组率景观</title>
    <url>/posts/59035/</url>
    <content><![CDATA[<p>ReLERNN是一个通过神经网络机器学习来计算全基因组局部重组率的软件，美中不足的是安装起来依赖环境太多且配置很麻烦，而且实际使用起来不能自定义滑动窗口大小，只能用软件内机器学习得出的最佳窗口大小（不知道后面会不会更新自定义窗口大小的功能）。</p>
<h1 id="安装流程记录"><a href="#安装流程记录" class="headerlink" title="安装流程记录"></a>安装流程记录</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;kr-colab&#x2F;ReLERNN.git</span><br><span class="line">cd ReLERNN&#x2F;</span><br><span class="line">pip install</span><br><span class="line">#ERROR: You must give at least one requirement to install (see &quot;pip help install&quot;)</span><br><span class="line">pip install .</span><br></pre></td></tr></table></figure>

<p>后续补充安装的一些包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install h5py</span><br><span class="line">pip install tensorflow</span><br></pre></td></tr></table></figure>

<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#step 1: simulation</span><br><span class="line"></span><br><span class="line">ReLERNN_SIMULATE -v file.vcf \</span><br><span class="line">-g file.bed \</span><br><span class="line">-d &#x2F;path&#x2F;to&#x2F;output&#x2F; \</span><br><span class="line">-t 1 --phased</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#step 2: training neural network</span><br><span class="line"></span><br><span class="line">ReLERNN_TRAIN -d &#x2F;path&#x2F;to&#x2F;output&#x2F; \</span><br><span class="line">--gpuID 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#step 3: predicting recombination rate for single population</span><br><span class="line"></span><br><span class="line">ReLERNN_PREDICT -v file.vcf \</span><br><span class="line">-d &#x2F;path&#x2F;to&#x2F;output&#x2F; \</span><br><span class="line">--phased </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#step 4 (optional): generating 95% confidence intervals and correcting bias</span><br><span class="line">#这一步我一般不做，可能以后做非常精细的分析会用到？</span><br><span class="line"></span><br><span class="line">#ReLERNN_BSCORRECT -d &#x2F;path&#x2F;to&#x2F;output&#x2F; \</span><br><span class="line">#-t 1</span><br></pre></td></tr></table></figure>

<p>ReLERNN官网：<a href="https://github.com/kr-colab/ReLERNN">https://github.com/kr-colab/ReLERNN</a><br>原始文献：<a href="https://doi.org/10.1093/molbev/msaa038">https://doi.org/10.1093/molbev/msaa038</a></p>
]]></content>
      <categories>
        <category>生信分析</category>
      </categories>
      <tags>
        <tag>生信</tag>
        <tag>基因组</tag>
      </tags>
  </entry>
  <entry>
    <title>Mallet驳Mayr对达尔文的误解 - 2008</title>
    <url>/posts/25596/</url>
    <content><![CDATA[<p>原文：Mallet J. Mayr’s view of Darwin: was Darwin wrong about speciation?[J]. Biological Journal of the Linnean Society, 2008, 95(1): 3-16.</p>
<h1 id="1－简介"><a href="#1－简介" class="headerlink" title="1－简介"></a>1－简介</h1><h2 id="公众认为达尔文错了的两大原因"><a href="#公众认为达尔文错了的两大原因" class="headerlink" title="公众认为达尔文错了的两大原因"></a>公众认为达尔文错了的两大原因</h2><ul>
<li>1、达尔文发现了自然选择导致的进化，却无法将其应用于“物种起源”这一他自己提出的主题。</li>
<li>2、他说服了世界接受进化的概念，却无法解释《物种起源》这本书的标题。</li>
</ul>
<h2 id="Mallet认为达尔文被误解了的两大原因"><a href="#Mallet认为达尔文被误解了的两大原因" class="headerlink" title="Mallet认为达尔文被误解了的两大原因"></a>Mallet认为达尔文被误解了的两大原因</h2><ul>
<li>1、很少有人认真读过他的书（对不起但这点真的很好笑）。</li>
<li>2、大多数人都在用现代的定义和观念去衡量他当年的观点。</li>
</ul>
<h2 id="但不可否认的是，将达尔文的观点奉为圭臬肯定有其危险性"><a href="#但不可否认的是，将达尔文的观点奉为圭臬肯定有其危险性" class="headerlink" title="但不可否认的是，将达尔文的观点奉为圭臬肯定有其危险性"></a>但不可否认的是，将达尔文的观点奉为圭臬肯定有其危险性</h2><h2 id="Mayr在引用达尔文言论时过于断章取义了"><a href="#Mayr在引用达尔文言论时过于断章取义了" class="headerlink" title="Mayr在引用达尔文言论时过于断章取义了"></a>Mayr在引用达尔文言论时过于断章取义了</h2><h1 id="2－达尔文实际上的观点及其含义"><a href="#2－达尔文实际上的观点及其含义" class="headerlink" title="2－达尔文实际上的观点及其含义"></a>2－达尔文实际上的观点及其含义</h1><h2 id="关于人工选择和“物种”的本质"><a href="#关于人工选择和“物种”的本质" class="headerlink" title="关于人工选择和“物种”的本质"></a>关于人工选择和“物种”的本质</h2><ul>
<li>达尔文的本意：物种的形成是连续的，物种间和亚种间的差距只不过是数量级层面上不同而已，但它们都处于同一个物种形成的continuum上。</li>
<li>作者观点：科学发展不需要及其精准的定义，因此也不用对species这个定义过于苛责。科学发展不应受制于定义，反倒是定义应基于科学概念得到。</li>
</ul>
<h2 id="关于物种形成中地理隔离的必要性"><a href="#关于物种形成中地理隔离的必要性" class="headerlink" title="关于物种形成中地理隔离的必要性"></a>关于物种形成中地理隔离的必要性</h2><ul>
<li><p>地理隔离的一个局限性：如果分布区太小，总个体数就很小，就会限制住总的突变数量，不利于这个种群的colonization。</p>
<ul>
<li>从这个角度看，地理隔离对新物种的形成就没那么必要了，因为大种群带来的突变机会更多，更利于物种适应不同环境。</li>
</ul>
</li>
</ul>
<h2 id="达尔文的物种形成机制：divergence"><a href="#达尔文的物种形成机制：divergence" class="headerlink" title="达尔文的物种形成机制：divergence"></a>达尔文的物种形成机制：divergence</h2><ul>
<li><p>达尔文理解的物种形成并没有中间形态。</p>
</li>
<li><p>达尔文认为的物种形成两大要素。</p>
<ul>
<li><p>分化</p>
<ul>
<li>核心：分化程度越高，占领不同生境的能力越强。</li>
</ul>
</li>
<li><p>灭绝</p>
</li>
</ul>
</li>
<li><p>Mallet认为虽然达尔文当年还并不知道遗传漂变的概念，但他已经隐约感知到了这个道理。</p>
</li>
</ul>
<h2 id="那么，为什么我们没看见更多处于物种形成中间形态的生物？"><a href="#那么，为什么我们没看见更多处于物种形成中间形态的生物？" class="headerlink" title="那么，为什么我们没看见更多处于物种形成中间形态的生物？"></a>那么，为什么我们没看见更多处于物种形成中间形态的生物？</h2><h2 id="杂交后代可育性与物种的本质"><a href="#杂交后代可育性与物种的本质" class="headerlink" title="杂交后代可育性与物种的本质"></a>杂交后代可育性与物种的本质</h2><ul>
<li>出于对性选择的认同，达尔文可能会倾向于否定跨物种的选型互配，以及由此带来的物种形成过程。</li>
</ul>
<h1 id="3－Mayr关于达尔文没能理解物种本质的观点（先扬后抑）"><a href="#3－Mayr关于达尔文没能理解物种本质的观点（先扬后抑）" class="headerlink" title="3－Mayr关于达尔文没能理解物种本质的观点（先扬后抑）"></a>3－Mayr关于达尔文没能理解物种本质的观点（先扬后抑）</h1><h2 id="Mayr的重要贡献"><a href="#Mayr的重要贡献" class="headerlink" title="Mayr的重要贡献"></a>Mayr的重要贡献</h2><ul>
<li><p>清晰阐述了“生物学上的物种概念”（“biological species concept，BSC”）。</p>
<ul>
<li><p>然而，Mayr的BSC其实是两个相关联概念的组合。</p>
<ul>
<li><p>生殖隔离：Mayr在这点上与杜布赞斯基观点一致。</p>
</li>
<li><p>多型种（polytypic species）：there were often a number of named, morphologically divergent, geographic subspecies within each widely distributed species</p>
<ul>
<li>地理上被隔绝的多样性物种只能被称为“亚种”，而非物种。</li>
<li>只有在它们出现在同一区域且没有出现中间形态个体的时候才能叫做单独的物种。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>物种形成不只是简单的“分化”，它必须具备同时出现在同域却不会相互融合的特质。达尔文其实明白这点，只不过没有在《物种起源》清晰表达出来，但这不是全盘否认他对物种定义的理由。</p>
<ul>
<li>Mayr对这点的观点导致之后的研究者们几乎达成了这么一个共识：要研究物种形成，就必须研究生殖隔离，因为只有生殖隔离才能让不同物种同时出现在同一个地方。</li>
</ul>
</li>
</ul>
<h2 id="Mayr把路走偏了（went-too-far）"><a href="#Mayr把路走偏了（went-too-far）" class="headerlink" title="Mayr把路走偏了（went too far）"></a>Mayr把路走偏了（went too far）</h2><ul>
<li><p>Mayr提出的“现代”概念其实当年的达尔文主义者都考虑过，并不算非常崭新的革命性见解。</p>
</li>
<li><p>Mayr的某些问题耽误了后世的人们正确认知物种形成。</p>
<ul>
<li><p>1、Mayr使用并推行了杜布赞斯基的“隔离机制”</p>
<ul>
<li><p>我们现在已经知道很多生殖隔离的进化其实和物种形成毫无关联，相反，这些生殖隔离是在物种形成之后才建立起来的。</p>
<ul>
<li><p>centrarchid fish只用了两百万年就完成了sister taxa的物种形成，但用了一千五百万年才建立起生殖隔离。</p>
</li>
<li><p>在杂交带，杂交后代的低适合度和可育性变化幅度很大，并不稳定，也不能预测表型和基因型的两极分化。</p>
<ul>
<li>与之相反，生态习性上的分化却往往能通过在配偶选择行为方面的“副作用or副产物”来导致接触区地带里快速且极端的分化。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>2、Mayr被一对完美相对的概念迷惑了</p>
<ul>
<li>除非拥有生殖隔离，否则物种就不能共同存在。</li>
<li>新物种只能在异域的条件下才能形成。</li>
</ul>
</li>
<li><p>3、Mayr在后期已经逐渐认识到了自己的错误，而大量事实证据也在涌现</p>
<ul>
<li><p>事实证明，即使在基因流存在的情况下，不同物种照样可以共存。</p>
</li>
<li><p>跨物种的杂交和渐渗很常见，而且可以对物种形成有贡献（即使是在非多倍体中也可以）。</p>
</li>
<li><p>在同一个湖里的鱼的爆炸性成种最有可能的解释就是同域成种。</p>
<ul>
<li>当然，我们仍然不知道同域成种到底有多普遍，这一点还需要进一步评估。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="4－What-if？"><a href="#4－What-if？" class="headerlink" title="4－What if？"></a>4－What if？</h1><h2 id="Mayr原本可以不选择如此偏激的观点"><a href="#Mayr原本可以不选择如此偏激的观点" class="headerlink" title="Mayr原本可以不选择如此偏激的观点"></a>Mayr原本可以不选择如此偏激的观点</h2><h2 id="Mayr的观念完全是可以与达尔文主义共存的"><a href="#Mayr的观念完全是可以与达尔文主义共存的" class="headerlink" title="Mayr的观念完全是可以与达尔文主义共存的"></a>Mayr的观念完全是可以与达尔文主义共存的</h2><h2 id="Mayr的错误观念导致的一些不良后果（这里提到的两点都很有意思）"><a href="#Mayr的错误观念导致的一些不良后果（这里提到的两点都很有意思）" class="headerlink" title="Mayr的错误观念导致的一些不良后果（这里提到的两点都很有意思）"></a>Mayr的错误观念导致的一些不良后果（这里提到的两点都很有意思）</h2><ul>
<li>在一些宗教保守的国家，进化生物学的推行尤为困难。如果像Mayr一样将物种视作“本质上与亚种完全不同的东西”，那么新物种的进化过程就会变得更加神秘也更难理解，这样只会让进化的研究面临更大的阻力。</li>
<li>由于Mayr坚称所有物种的最终归宿都会是“pure species”，而杂交个体的出现是由于生殖隔离的“breakdown”，这导致美国政府推出了被称为“hybrid policy”的濒危动物保护法，在这个法案的理解中，只要存在杂交，那么一个物种就不再是“pure”的了，它就不再是原本值得保护的那同一个物种，因此也就不值得针对它开展什么保育项目了。就连Mayr本人后来都声称这个法案过于严格了。现在这个法案已被撤销。</li>
</ul>
]]></content>
      <categories>
        <category>读文章</category>
      </categories>
      <tags>
        <tag>进化生物学</tag>
        <tag>物种形成</tag>
        <tag>读文章笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>用selscan进行全基因组正选择扫描</title>
    <url>/posts/24658/</url>
    <content><![CDATA[<p>selscan是一款非常实用的全基因组正选择扫描软件，接受经过phasing处理的vcf作为输入文件，可以按指定大小的滑动窗口计算EHH、iHS和nSL等等正选择指标。</p>
<h1 id="按位点逐条scaffold计算"><a href="#按位点逐条scaffold计算" class="headerlink" title="按位点逐条scaffold计算"></a>按位点逐条scaffold计算</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">selscan --nsl --vcf &#x2F;path&#x2F;to&#x2F;file.vcf --out &#x2F;path&#x2F;to&#x2F;outname</span><br></pre></td></tr></table></figure>

<h1 id="用sliding-window进行上述结果的标准化"><a href="#用sliding-window进行上述结果的标准化" class="headerlink" title="用sliding window进行上述结果的标准化"></a>用sliding window进行上述结果的标准化</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">norm --nsl --files outname.nsl.out --bp-win --winsize 50000</span><br></pre></td></tr></table></figure>

<h1 id="通过shell循环一次性计算多个scaffold的nSL"><a href="#通过shell循环一次性计算多个scaffold的nSL" class="headerlink" title="通过shell循环一次性计算多个scaffold的nSL"></a>通过shell循环一次性计算多个scaffold的nSL</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">filelist=`ls /path/to/list`</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$filelist</span></span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> PID:$$</span><br><span class="line"> <span class="built_in">echo</span> ========== selscan <span class="keyword">for</span> <span class="variable">$file</span> start at : `date` ==========</span><br><span class="line"> selscan --nsl --vcf <span class="variable">$file</span> --out <span class="variable">$file</span></span><br><span class="line"> <span class="built_in">echo</span> ========== selscan <span class="keyword">for</span> <span class="variable">$file</span> end at : `date` ==========</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h1 id="官网上给出的详细参数和输出结果说明"><a href="#官网上给出的详细参数和输出结果说明" class="headerlink" title="官网上给出的详细参数和输出结果说明"></a>官网上给出的详细参数和输出结果说明</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">To normalize selscan output across frequency bins:</span><br><span class="line"></span><br><span class="line">.&#x2F;norm [--ihs|--xpehh|--nsl|--xpnsl|--ihh12] --files &lt;file1.*.out&gt; ... &lt;fileN.*.out&gt;</span><br><span class="line"></span><br><span class="line">To normalize selscan output and analyze non-overlapping windows of fixed bp for </span><br><span class="line">extreme scores:</span><br><span class="line"></span><br><span class="line">.&#x2F;norm [--ihs|--xpehh|--nsl|--xpnsl|--ihh12] --files &lt;file1.*.out&gt; ... &lt;fileN.*.out&gt; --bp-win</span><br><span class="line"></span><br><span class="line">----------Command Line Arguments----------</span><br><span class="line"></span><br><span class="line">--bins &lt;int&gt;: The number of frequency bins in [0,1] for score normalization.</span><br><span class="line">    Default: 100</span><br><span class="line"></span><br><span class="line">--bp-win &lt;bool&gt;: If set, will use windows of a constant bp size with varying</span><br><span class="line">    number of SNPs.</span><br><span class="line">    Default: false</span><br><span class="line"></span><br><span class="line">--crit-percent &lt;double&gt;: Set the critical value such that a SNP with iHS in the most extreme CRIT_PERCENT tails (two-tailed) is marked as an extreme SNP.</span><br><span class="line">    Not used by default.</span><br><span class="line">    Default: -1.00</span><br><span class="line"></span><br><span class="line">--crit-val &lt;double&gt;: Set the critical value such that a SNP with |iHS| &gt; CRIT_VAL is marked as an extreme SNP.  Default as in Voight et al.</span><br><span class="line">    Default: 2.00</span><br><span class="line"></span><br><span class="line">--files &lt;string1&gt; ... &lt;stringN&gt;: A list of files delimited by whitespace for</span><br><span class="line">    joint normalization.</span><br><span class="line">    Expected format for iHS or nSL files (no header):</span><br><span class="line">    &lt;locus name&gt; &lt;physical pos&gt; &lt;freq&gt; &lt;ihh1&#x2F;sL1&gt; &lt;ihh2&#x2F;sL2&gt; &lt;ihs&#x2F;nsl&gt;</span><br><span class="line">    Expected format for XP-EHH files (one line header):</span><br><span class="line">    &lt;locus name&gt; &lt;physical pos&gt; &lt;genetic pos&gt; &lt;freq1&gt; &lt;ihh1&gt; &lt;freq2&gt; &lt;ihh2&gt; &lt;xpehh&gt;</span><br><span class="line">    Expected format for iHH12 files (one line header):</span><br><span class="line">    &lt;locus name&gt; &lt;physical pos&gt; &lt;freq1&gt; &lt;ihh12&gt;</span><br><span class="line">    Default: infile</span><br><span class="line"></span><br><span class="line">--first &lt;bool&gt;: Output only the first file&#39;s normalization.</span><br><span class="line">    Default: false</span><br><span class="line"></span><br><span class="line">--help &lt;bool&gt;: Prints this help dialog.</span><br><span class="line">    Default: false</span><br><span class="line"></span><br><span class="line">--ihh12 &lt;bool&gt;: Do ihh12 normalization.</span><br><span class="line">    Default: false</span><br><span class="line"></span><br><span class="line">--ihs &lt;bool&gt;: Do iHS normalization.</span><br><span class="line">    Default: false</span><br><span class="line"></span><br><span class="line">--log &lt;string&gt;: The log file name.</span><br><span class="line">    Default: logfile</span><br><span class="line"></span><br><span class="line">--min-snps &lt;int&gt;: Only consider a bp window if it has at least this many SNPs.</span><br><span class="line">    Default: 10</span><br><span class="line"></span><br><span class="line">--nsl &lt;bool&gt;: Do nSL normalization.</span><br><span class="line">    Default: false</span><br><span class="line"></span><br><span class="line">--qbins &lt;int&gt;: Outlying windows are binned by number of sites within each</span><br><span class="line">    window.  This is the number of quantile bins to use.</span><br><span class="line">    Default: 10</span><br><span class="line"></span><br><span class="line">--winsize &lt;int&gt;: The non-overlapping window size for calculating the percentage</span><br><span class="line">    of extreme SNPs.</span><br><span class="line">    Default: 100000</span><br><span class="line"></span><br><span class="line">--xpehh &lt;bool&gt;: Do XP-EHH normalization.</span><br><span class="line">    Default: false</span><br><span class="line"></span><br><span class="line">--xpnsl &lt;bool&gt;: Do XP-nSL normalization.</span><br><span class="line">    Default: false</span><br></pre></td></tr></table></figure>

<p>norm v1.3.0 - Now supports –xpnsl flag, which is identical to using –xpehh.<br>–qbins now has a default value of 10 instead of 20.<br>–bp-win analyses have been changed when analyzing XP-EHH and XP-nSL scores. Since positive scores suggest adaptation in the first (non-ref) population and negative scores suggest adaptation in the second (ref) population, we split windows into those enriched for extreme positive scores and those enriched for extreme negative scores.<br>min and max scores are given for each window for XP statistics, and the max |score| is reported for iHS and nSL stats.</p>
<p>*.windows output files therefore have additional columns:</p>
<p>For XP stats:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;win start&gt; &lt;win end&gt; &lt;# scores in win&gt; &lt;frac scores gt threshold&gt; &lt;frac scores lt threshold&gt; &lt;approx percentile for gt threshold wins&gt; &lt;approx percentile for lt threshold wins&gt; &lt;max score&gt; &lt;min score&gt;</span><br></pre></td></tr></table></figure>

<p>For iHS and nSL:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;win start&gt; &lt;win end&gt; &lt;# scores in win&gt; &lt;frac scores gt threshold&gt; &lt;frac scores lt threshold&gt; &lt;approx percentile for gt threshold wins&gt; &lt;approx percentile for lt threshold wins&gt; &lt;max score&gt; &lt;min score&gt;</span><br></pre></td></tr></table></figure>

<h1 id="官网上关于XP-nSL输出结果的解释"><a href="#官网上关于XP-nSL输出结果的解释" class="headerlink" title="官网上关于XP-nSL输出结果的解释"></a>官网上关于XP-nSL输出结果的解释</h1><p><a href="https://github.com/szpiech/selscan/issues/68">https://github.com/szpiech/selscan/issues/68</a></p>
<p>selscan官网：<a href="https://github.com/szpiech/selscan">https://github.com/szpiech/selscan</a><br>原始文献：<a href="https://doi.org/10.1093/molbev/msu211">https://doi.org/10.1093/molbev/msu211</a></p>
]]></content>
      <categories>
        <category>生信分析</category>
      </categories>
      <tags>
        <tag>生信</tag>
        <tag>基因组</tag>
      </tags>
  </entry>
  <entry>
    <title>用ANGSD和Stairway Plot2构建种群历史动态</title>
    <url>/posts/33302/</url>
    <content><![CDATA[<h1 id="1、用angsd将bam文件转换为saf格式"><a href="#1、用angsd将bam文件转换为saf格式" class="headerlink" title="1、用angsd将bam文件转换为saf格式"></a>1、用angsd将bam文件转换为saf格式</h1><p>比起easySFS.py脚本来说，angsd对于missing data的考虑更加全面，但是处理起来相对而言会更麻烦一点。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#用samtools给参考基因组构建索引</span><br><span class="line">samtools faidx ref.fa</span><br><span class="line"></span><br><span class="line">angsd -bam bam.bamlist \</span><br><span class="line">-doSaf 1 -out XXX \</span><br><span class="line">-anc ref.fa \ #确保上一步生成的fai索引文件位于参考基因组的同一路径下</span><br><span class="line">-GL 1 -minMapQ 1 -minQ 30</span><br></pre></td></tr></table></figure>

<h1 id="2、用angsd内置程序realSFS将saf转换为sfs"><a href="#2、用angsd内置程序realSFS将saf转换为sfs" class="headerlink" title="2、用angsd内置程序realSFS将saf转换为sfs"></a>2、用angsd内置程序realSFS将saf转换为sfs</h1><p>这一步总是显示占用过多内存，尤其是在单个种群的样本量多于10个并且都是测序深度较高的时候，相当麻烦。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">realSFS \</span><br><span class="line">XXX.saf.idx \</span><br><span class="line">-maxIter 100 -P 2 -fold 1 &gt; XXX_folded.sfs</span><br><span class="line">#这个“-fold 1”的参数是为了生成folded版本的sfs。公认的解释似乎是不清楚祖先态的时候适用folded，而vcf文件被较好polarized的时候适用unfolded版本</span><br></pre></td></tr></table></figure>

<h1 id="3、在sfs基础上生成shell批处理文件"><a href="#3、在sfs基础上生成shell批处理文件" class="headerlink" title="3、在sfs基础上生成shell批处理文件"></a>3、在sfs基础上生成shell批处理文件</h1><p>首先需要给每个目标种群编辑一份blueprint后缀的文件，里面标注出这个种群的相关信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#XXX blueprint file</span><br><span class="line">#input setting</span><br><span class="line">popid: XXX # id of the population (no white space)</span><br><span class="line">nseq: XX # number of sequences</span><br><span class="line">L: 1234895725 # total number of observed nucleic sites, including polymorphic and monomorphic</span><br><span class="line">whether_folded: true # whethr the SFS is folded (true or false)</span><br><span class="line">SFS:     XXX.XXX XXX.XXX XXX.XXX XXX.XXX XXX.XXX XXX.XXX XXX.XXX XXX.XXX XXX.XXX XXX.XXX XXX.XXX  # snp frequency spectrum: number of singleton, number of doubleton, etc. (separated by white space)</span><br><span class="line">#smallest_size_of_SFS_bin_used_for_estimation: 1 # default is 1; to ignore singletons, uncomment this line and change this number to 2</span><br><span class="line">#largest_size_of_SFS_bin_used_for_estimation: 17 # default is nseq&#x2F;2 for folded SFS</span><br><span class="line">pct_training: 0.67 # percentage of sites for training</span><br><span class="line">nrand: (nseq-2)&#x2F;4    (nseq-2)&#x2F;2   (nseq-2)*3&#x2F;4   nseq-2 # number of random break points for each try (separated by white space)</span><br><span class="line">project_dir: &#x2F;path&#x2F;to&#x2F;XXX&#x2F; # project directory</span><br><span class="line">stairway_plot_dir: &#x2F;path&#x2F;to&#x2F;stairway_plot_v2.1.1&#x2F;stairway_plot_es # directory to the stairway plot files</span><br><span class="line">ninput: 200 # number of input files to be created for each estimation</span><br><span class="line">#random_seed: 6</span><br><span class="line">#output setting</span><br><span class="line">mu: XXXe-X # assumed mutation rate per site per generation</span><br><span class="line">year_per_generation: XXX # assumed generation time (in years)</span><br><span class="line">#plot setting</span><br><span class="line">plot_title: demo_XXX # title of the plot</span><br><span class="line">xrange: 0.1,10000 # Time (1k year) range; format: xmin,xmax; &quot;0,0&quot; for default</span><br><span class="line">yrange: 0,0 # Ne (1k individual) range; format: xmin,xmax; &quot;0,0&quot; for default</span><br><span class="line">xspacing: 2 # X axis spacing</span><br><span class="line">yspacing: 2 # Y axis spacing</span><br><span class="line">fontsize: 12 # Font size</span><br></pre></td></tr></table></figure>
<p>编辑blueprint文件参数的相关说明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">popid: 这里不能包含空格</span><br><span class="line">nseq: 也就是你这个种群个体数×2</span><br><span class="line">L: 参考基因组总长度（总共有多少个碱基）</span><br><span class="line">whether_folded: 按照上面生成sfs文件的过程填true或者false</span><br><span class="line">SFS: 上一步生成的sfs文件中去除第一个数字和之后所有的0</span><br><span class="line">#smallest_size_of_SFS_bin_used_for_estimation: 1 # default is 1; to ignore singletons, uncomment this line and change this number to 2</span><br><span class="line">#largest_size_of_SFS_bin_used_for_estimation: 17 # default is nseq&#x2F;2 for folded SFS</span><br><span class="line">pct_training: 似乎默认的就是0.67</span><br><span class="line">nrand: 这里的4个数字分别按照这样计算（除不尽时取整数）：(nseq-2)&#x2F;4, (nseq-2)&#x2F;2, (nseq-2)*3&#x2F;4, nseq-2</span><br><span class="line">project_dir: 输出结果文件夹</span><br><span class="line">stairway_plot_dir: stairway_plot_es程序所在的路径</span><br><span class="line">ninput: 每次模拟输入的数据量，一般为200</span><br><span class="line">#random_seed: 6</span><br><span class="line">#output setting</span><br><span class="line">mu: 突变率</span><br><span class="line">year_per_generation: 世代数</span><br><span class="line">#plot setting</span><br><span class="line">plot_title: 输出图片的名字</span><br><span class="line">xrange: x轴（距今时间）的范围</span><br><span class="line">yrange: y轴（Ne大小）的范围，默认为0,0</span><br><span class="line">xspacing: X axis spacing</span><br><span class="line">yspacing: Y axis spacing</span><br><span class="line">fontsize: 字体大小</span><br></pre></td></tr></table></figure>
<p>然后运行stairbuilder程序，在这个blueprint文件的基础上生成后续模拟分析需要的批处理脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup java -cp &#x2F;path&#x2F;to&#x2F;stairway_plot_v2.1.1&#x2F;stairway_plot_es \</span><br><span class="line">Stairbuilder &#x2F;path&#x2F;to&#x2F;XXX_folded.blueprint 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<p>这一步之后会在当前文件夹里生成一个叫XXX.blueprint.sh的脚本。之后只要nohup执行这个脚本就行了。</p>
<h1 id="4、运行stairwayplot程序"><a href="#4、运行stairwayplot程序" class="headerlink" title="4、运行stairwayplot程序"></a>4、运行stairwayplot程序</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup sh XXX_folded.blueprint.sh &gt; XXX_folded.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<p>生成的.final后缀文件就是最终的结果图。</p>
]]></content>
      <categories>
        <category>生信分析</category>
      </categories>
      <tags>
        <tag>生信</tag>
        <tag>基因组</tag>
      </tags>
  </entry>
</search>
